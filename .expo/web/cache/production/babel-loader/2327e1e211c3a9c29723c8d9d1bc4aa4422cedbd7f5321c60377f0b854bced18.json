{"ast":null,"code":"import axios from'axios';export const TOGGLE_BOT='TOGGLE_BOT';export const SET_FILTERS='SET_FILTERS';export const SET_JUST_EAT_DATA='SET_JUST_EAT_DATA';export const SET_USER='SET_USER';export const SET_SUBSCRIPTION_STATUS='SET_SUBSCRIPTION_STATUS';export const TOGGLE_THEME='TOGGLE_THEME';export const LOGOUT='LOGOUT';export const UPDATE_USER_EMAIL='UPDATE_USER_EMAIL';export const UPDATE_USER_PASSWORD='UPDATE_USER_PASSWORD';export const toggleBot=()=>({type:TOGGLE_BOT});export const logout=()=>({type:LOGOUT});export const toggleTheme=()=>({type:TOGGLE_THEME});export const setFilters=filters=>({type:SET_FILTERS,payload:filters});export const setJustEatData=data=>({type:SET_JUST_EAT_DATA,payload:data});export const setUser=user=>({type:SET_USER,payload:user});export const updateUserEmail=email=>({type:UPDATE_USER_EMAIL,payload:email});export const updateUserPassword=password=>({type:UPDATE_USER_PASSWORD,payload:password});export const loginUser=(email,password)=>{return async dispatch=>{try{const response=await axios.post('http://localhost:3000/auth/login',{email,password});if(response.status===200){const userData={userId:response.data.userId,token:response.data.token,subscriptionStatus:response.data.subscriptionStatus,trialEnd:response.data.trialEnd,justEatEmail:response.data.justEatEmail,justEatPassword:response.data.justEatPassword};dispatch(setUser(userData));dispatch(checkSubscriptionStatus());if(userData.justEatEmail&&userData.justEatPassword){dispatch(connectJustEat(userData.justEatEmail,userData.justEatPassword,userData.userId));}}}catch(error){console.error('Error logging in:',error.response?error.response.data:error.message);}};};export const connectJustEat=(email,password,userId)=>{return async dispatch=>{try{const justEatResponse=await axios.post('http://localhost:3000/justEat/connect',{justEatEmail:email,justEatPassword:password,userId:userId});if(justEatResponse.status===200){const justEatData={id:justEatResponse.data.courierId,token:justEatResponse.data.userToken};dispatch(setJustEatData(justEatData));}else{console.error('Falha na conexão com Just Eat:',justEatResponse.data);}}catch(error){console.error('Erro ao conectar com Just Eat:',error.response?error.response.data:error.message);}};};export const createCheckoutSession=plan=>{return async(dispatch,getState)=>{const{user}=getState();try{if(!user.userId){throw new Error('User ID is not available');}const response=await axios.post('http://localhost:3000/payment/create-checkout-session',{priceId:plan,userId:user.userId});if(response.status===200&&response.data.url){return response.data.url;}else{throw new Error(response.data.error||'Failed to create checkout session');}}catch(error){console.error('Error creating checkout session:',error.message);throw error;}};};export const checkSubscriptionStatus=()=>{return async(dispatch,getState)=>{const{user}=getState();try{if(!user.Id){throw new Error('User ID is not available');}const response=await axios.post('http://localhost:3000/subscription/status',{userId:user.Id});if(response.status===200){dispatch({type:SET_SUBSCRIPTION_STATUS,payload:response.data.subscriptionStatus});}else{console.error('Failed to check subscription status:',response.data);}}catch(error){console.error('Error checking subscription status:',error.message);}};};export const updateUserEmailAsync=email=>async(dispatch,getState)=>{const{user}=getState();if(!user.userId){console.error('User ID is not available');return;}try{const response=await axios.put('http://localhost:3000/auth/update-email',{userId:user.userId,newEmail:email});if(response.status===200){dispatch({type:UPDATE_USER_EMAIL,payload:email});}}catch(error){console.error('Error updating email:',error.message);}};export const updateUserPasswordAsync=password=>async(dispatch,getState)=>{const{user}=getState();if(!user.userId){console.error('User ID is not available');return;}try{const response=await axios.put('http://localhost:3000/auth/update-password',{userId:user.userId,newPassword:password});if(response.status===200){dispatch(updateUserPassword(password));}}catch(error){console.error('Error updating password:',error.message);}};","map":{"version":3,"names":["axios","TOGGLE_BOT","SET_FILTERS","SET_JUST_EAT_DATA","SET_USER","SET_SUBSCRIPTION_STATUS","TOGGLE_THEME","LOGOUT","UPDATE_USER_EMAIL","UPDATE_USER_PASSWORD","toggleBot","type","logout","toggleTheme","setFilters","filters","payload","setJustEatData","data","setUser","user","updateUserEmail","email","updateUserPassword","password","loginUser","dispatch","response","post","status","userData","userId","token","subscriptionStatus","trialEnd","justEatEmail","justEatPassword","checkSubscriptionStatus","connectJustEat","error","console","message","justEatResponse","justEatData","id","courierId","userToken","createCheckoutSession","plan","getState","Error","priceId","url","Id","updateUserEmailAsync","put","newEmail","updateUserPasswordAsync","newPassword"],"sources":["C:/Users/Carlos/Desktop/LightingGrabberApp/LightingGrabberApp/src/redux/actions.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nexport const TOGGLE_BOT = 'TOGGLE_BOT';\r\nexport const SET_FILTERS = 'SET_FILTERS';\r\nexport const SET_JUST_EAT_DATA = 'SET_JUST_EAT_DATA';\r\nexport const SET_USER = 'SET_USER';\r\nexport const SET_SUBSCRIPTION_STATUS = 'SET_SUBSCRIPTION_STATUS';\r\nexport const TOGGLE_THEME = 'TOGGLE_THEME';\r\nexport const LOGOUT = 'LOGOUT';\r\nexport const UPDATE_USER_EMAIL = 'UPDATE_USER_EMAIL';\r\nexport const UPDATE_USER_PASSWORD = 'UPDATE_USER_PASSWORD';\r\n\r\nexport const toggleBot = () => ({\r\n  type: TOGGLE_BOT,\r\n});\r\n\r\nexport const logout = () => ({\r\n  type: LOGOUT,\r\n});\r\n\r\nexport const toggleTheme = () => ({\r\n  type: TOGGLE_THEME,\r\n});\r\n\r\nexport const setFilters = (filters) => ({\r\n  type: SET_FILTERS,\r\n  payload: filters,\r\n});\r\n\r\nexport const setJustEatData = (data) => ({\r\n  type: SET_JUST_EAT_DATA,\r\n  payload: data,\r\n});\r\n\r\nexport const setUser = (user) => ({\r\n  type: SET_USER,\r\n  payload: user,\r\n});\r\n\r\nexport const updateUserEmail = (email) => ({\r\n  type: UPDATE_USER_EMAIL,\r\n  payload: email,\r\n});\r\n\r\nexport const updateUserPassword = (password) => ({\r\n  type: UPDATE_USER_PASSWORD,\r\n  payload: password,\r\n});\r\n\r\nexport const loginUser = (email, password) => {\r\n  return async (dispatch) => {\r\n    try {\r\n      const response = await axios.post('http://localhost:3000/auth/login', { email, password });\r\n      if (response.status === 200) {\r\n        const userData = {\r\n          userId: response.data.userId,\r\n          token: response.data.token,\r\n          subscriptionStatus: response.data.subscriptionStatus,\r\n          trialEnd: response.data.trialEnd,\r\n          justEatEmail: response.data.justEatEmail,\r\n          justEatPassword: response.data.justEatPassword,\r\n        };\r\n        dispatch(setUser(userData));\r\n        dispatch(checkSubscriptionStatus());\r\n\r\n        if (userData.justEatEmail && userData.justEatPassword) {\r\n          dispatch(connectJustEat(userData.justEatEmail, userData.justEatPassword, userData.userId));\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error('Error logging in:', error.response ? error.response.data : error.message);\r\n    }\r\n  };\r\n};\r\n\r\nexport const connectJustEat = (email, password, userId) => {\r\n  return async (dispatch) => {\r\n    try {\r\n      const justEatResponse = await axios.post('http://localhost:3000/justEat/connect', {\r\n        justEatEmail: email,\r\n        justEatPassword: password,\r\n        userId: userId,\r\n      });\r\n\r\n      if (justEatResponse.status === 200) {\r\n        const justEatData = {\r\n          id: justEatResponse.data.courierId,\r\n          token: justEatResponse.data.userToken,\r\n        };\r\n        dispatch(setJustEatData(justEatData));\r\n      } else {\r\n        console.error('Falha na conexão com Just Eat:', justEatResponse.data);\r\n      }\r\n    } catch (error) {\r\n      console.error('Erro ao conectar com Just Eat:', error.response ? error.response.data : error.message);\r\n    }\r\n  };\r\n};\r\n\r\nexport const createCheckoutSession = (plan) => {\r\n  return async (dispatch, getState) => {\r\n    const { user } = getState();\r\n\r\n    try {\r\n      if (!user.userId) {\r\n        throw new Error('User ID is not available');\r\n      }\r\n\r\n      const response = await axios.post('http://localhost:3000/payment/create-checkout-session', {\r\n        priceId: plan,\r\n        userId: user.userId,\r\n      });\r\n\r\n      if (response.status === 200 && response.data.url) {\r\n        return response.data.url; \r\n      } else {\r\n        throw new Error(response.data.error || 'Failed to create checkout session');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error creating checkout session:', error.message);\r\n      throw error;\r\n    }\r\n  };\r\n};\r\n\r\nexport const checkSubscriptionStatus = () => {\r\n  return async (dispatch, getState) => {\r\n    const { user } = getState();\r\n\r\n    try {\r\n      if (!user.Id) {\r\n        throw new Error('User ID is not available');\r\n      }\r\n\r\n      const response = await axios.post('http://localhost:3000/subscription/status', {\r\n        userId: user.Id, \r\n      });\r\n\r\n      if (response.status === 200) {\r\n        dispatch({\r\n          type: SET_SUBSCRIPTION_STATUS,\r\n          payload: response.data.subscriptionStatus,\r\n        });\r\n      } else {\r\n        console.error('Failed to check subscription status:', response.data);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error checking subscription status:', error.message);\r\n    }\r\n  };\r\n};\r\n\r\nexport const updateUserEmailAsync = (email) => async (dispatch, getState) => {\r\n  const { user } = getState();\r\n\r\n  if (!user.userId) {\r\n    console.error('User ID is not available');\r\n    return;\r\n  }\r\n\r\n  try {\r\n    const response = await axios.put('http://localhost:3000/auth/update-email', { userId: user.userId, newEmail: email });\r\n    if (response.status === 200) {\r\n      dispatch({\r\n        type: UPDATE_USER_EMAIL,\r\n        payload: email,\r\n      });\r\n    }\r\n  } catch (error) {\r\n    console.error('Error updating email:', error.message);\r\n  }\r\n};\r\n\r\nexport const updateUserPasswordAsync = (password) => async (dispatch, getState) => {\r\n  const { user } = getState();\r\n\r\n  if (!user.userId) {\r\n    console.error('User ID is not available');\r\n    return;\r\n  }\r\n\r\n  try {\r\n    const response = await axios.put('http://localhost:3000/auth/update-password', { userId: user.userId, newPassword: password });\r\n    if (response.status === 200) {\r\n      dispatch(updateUserPassword(password));\r\n    }\r\n  } catch (error) {\r\n    console.error('Error updating password:', error.message);\r\n  }\r\n};\r\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CAEzB,MAAO,MAAM,CAAAC,UAAU,CAAG,YAAY,CACtC,MAAO,MAAM,CAAAC,WAAW,CAAG,aAAa,CACxC,MAAO,MAAM,CAAAC,iBAAiB,CAAG,mBAAmB,CACpD,MAAO,MAAM,CAAAC,QAAQ,CAAG,UAAU,CAClC,MAAO,MAAM,CAAAC,uBAAuB,CAAG,yBAAyB,CAChE,MAAO,MAAM,CAAAC,YAAY,CAAG,cAAc,CAC1C,MAAO,MAAM,CAAAC,MAAM,CAAG,QAAQ,CAC9B,MAAO,MAAM,CAAAC,iBAAiB,CAAG,mBAAmB,CACpD,MAAO,MAAM,CAAAC,oBAAoB,CAAG,sBAAsB,CAE1D,MAAO,MAAM,CAAAC,SAAS,CAAGA,CAAA,IAAO,CAC9BC,IAAI,CAAEV,UACR,CAAC,CAAC,CAEF,MAAO,MAAM,CAAAW,MAAM,CAAGA,CAAA,IAAO,CAC3BD,IAAI,CAAEJ,MACR,CAAC,CAAC,CAEF,MAAO,MAAM,CAAAM,WAAW,CAAGA,CAAA,IAAO,CAChCF,IAAI,CAAEL,YACR,CAAC,CAAC,CAEF,MAAO,MAAM,CAAAQ,UAAU,CAAIC,OAAO,GAAM,CACtCJ,IAAI,CAAET,WAAW,CACjBc,OAAO,CAAED,OACX,CAAC,CAAC,CAEF,MAAO,MAAM,CAAAE,cAAc,CAAIC,IAAI,GAAM,CACvCP,IAAI,CAAER,iBAAiB,CACvBa,OAAO,CAAEE,IACX,CAAC,CAAC,CAEF,MAAO,MAAM,CAAAC,OAAO,CAAIC,IAAI,GAAM,CAChCT,IAAI,CAAEP,QAAQ,CACdY,OAAO,CAAEI,IACX,CAAC,CAAC,CAEF,MAAO,MAAM,CAAAC,eAAe,CAAIC,KAAK,GAAM,CACzCX,IAAI,CAAEH,iBAAiB,CACvBQ,OAAO,CAAEM,KACX,CAAC,CAAC,CAEF,MAAO,MAAM,CAAAC,kBAAkB,CAAIC,QAAQ,GAAM,CAC/Cb,IAAI,CAAEF,oBAAoB,CAC1BO,OAAO,CAAEQ,QACX,CAAC,CAAC,CAEF,MAAO,MAAM,CAAAC,SAAS,CAAGA,CAACH,KAAK,CAAEE,QAAQ,GAAK,CAC5C,MAAO,MAAO,CAAAE,QAAQ,EAAK,CACzB,GAAI,CACF,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAA3B,KAAK,CAAC4B,IAAI,CAAC,kCAAkC,CAAE,CAAEN,KAAK,CAAEE,QAAS,CAAC,CAAC,CAC1F,GAAIG,QAAQ,CAACE,MAAM,GAAK,GAAG,CAAE,CAC3B,KAAM,CAAAC,QAAQ,CAAG,CACfC,MAAM,CAAEJ,QAAQ,CAACT,IAAI,CAACa,MAAM,CAC5BC,KAAK,CAAEL,QAAQ,CAACT,IAAI,CAACc,KAAK,CAC1BC,kBAAkB,CAAEN,QAAQ,CAACT,IAAI,CAACe,kBAAkB,CACpDC,QAAQ,CAAEP,QAAQ,CAACT,IAAI,CAACgB,QAAQ,CAChCC,YAAY,CAAER,QAAQ,CAACT,IAAI,CAACiB,YAAY,CACxCC,eAAe,CAAET,QAAQ,CAACT,IAAI,CAACkB,eACjC,CAAC,CACDV,QAAQ,CAACP,OAAO,CAACW,QAAQ,CAAC,CAAC,CAC3BJ,QAAQ,CAACW,uBAAuB,CAAC,CAAC,CAAC,CAEnC,GAAIP,QAAQ,CAACK,YAAY,EAAIL,QAAQ,CAACM,eAAe,CAAE,CACrDV,QAAQ,CAACY,cAAc,CAACR,QAAQ,CAACK,YAAY,CAAEL,QAAQ,CAACM,eAAe,CAAEN,QAAQ,CAACC,MAAM,CAAC,CAAC,CAC5F,CACF,CACF,CAAE,MAAOQ,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,mBAAmB,CAAEA,KAAK,CAACZ,QAAQ,CAAGY,KAAK,CAACZ,QAAQ,CAACT,IAAI,CAAGqB,KAAK,CAACE,OAAO,CAAC,CAC1F,CACF,CAAC,CACH,CAAC,CAED,MAAO,MAAM,CAAAH,cAAc,CAAGA,CAAChB,KAAK,CAAEE,QAAQ,CAAEO,MAAM,GAAK,CACzD,MAAO,MAAO,CAAAL,QAAQ,EAAK,CACzB,GAAI,CACF,KAAM,CAAAgB,eAAe,CAAG,KAAM,CAAA1C,KAAK,CAAC4B,IAAI,CAAC,uCAAuC,CAAE,CAChFO,YAAY,CAAEb,KAAK,CACnBc,eAAe,CAAEZ,QAAQ,CACzBO,MAAM,CAAEA,MACV,CAAC,CAAC,CAEF,GAAIW,eAAe,CAACb,MAAM,GAAK,GAAG,CAAE,CAClC,KAAM,CAAAc,WAAW,CAAG,CAClBC,EAAE,CAAEF,eAAe,CAACxB,IAAI,CAAC2B,SAAS,CAClCb,KAAK,CAAEU,eAAe,CAACxB,IAAI,CAAC4B,SAC9B,CAAC,CACDpB,QAAQ,CAACT,cAAc,CAAC0B,WAAW,CAAC,CAAC,CACvC,CAAC,IAAM,CACLH,OAAO,CAACD,KAAK,CAAC,gCAAgC,CAAEG,eAAe,CAACxB,IAAI,CAAC,CACvE,CACF,CAAE,MAAOqB,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,gCAAgC,CAAEA,KAAK,CAACZ,QAAQ,CAAGY,KAAK,CAACZ,QAAQ,CAACT,IAAI,CAAGqB,KAAK,CAACE,OAAO,CAAC,CACvG,CACF,CAAC,CACH,CAAC,CAED,MAAO,MAAM,CAAAM,qBAAqB,CAAIC,IAAI,EAAK,CAC7C,MAAO,OAAOtB,QAAQ,CAAEuB,QAAQ,GAAK,CACnC,KAAM,CAAE7B,IAAK,CAAC,CAAG6B,QAAQ,CAAC,CAAC,CAE3B,GAAI,CACF,GAAI,CAAC7B,IAAI,CAACW,MAAM,CAAE,CAChB,KAAM,IAAI,CAAAmB,KAAK,CAAC,0BAA0B,CAAC,CAC7C,CAEA,KAAM,CAAAvB,QAAQ,CAAG,KAAM,CAAA3B,KAAK,CAAC4B,IAAI,CAAC,uDAAuD,CAAE,CACzFuB,OAAO,CAAEH,IAAI,CACbjB,MAAM,CAAEX,IAAI,CAACW,MACf,CAAC,CAAC,CAEF,GAAIJ,QAAQ,CAACE,MAAM,GAAK,GAAG,EAAIF,QAAQ,CAACT,IAAI,CAACkC,GAAG,CAAE,CAChD,MAAO,CAAAzB,QAAQ,CAACT,IAAI,CAACkC,GAAG,CAC1B,CAAC,IAAM,CACL,KAAM,IAAI,CAAAF,KAAK,CAACvB,QAAQ,CAACT,IAAI,CAACqB,KAAK,EAAI,mCAAmC,CAAC,CAC7E,CACF,CAAE,MAAOA,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,kCAAkC,CAAEA,KAAK,CAACE,OAAO,CAAC,CAChE,KAAM,CAAAF,KAAK,CACb,CACF,CAAC,CACH,CAAC,CAED,MAAO,MAAM,CAAAF,uBAAuB,CAAGA,CAAA,GAAM,CAC3C,MAAO,OAAOX,QAAQ,CAAEuB,QAAQ,GAAK,CACnC,KAAM,CAAE7B,IAAK,CAAC,CAAG6B,QAAQ,CAAC,CAAC,CAE3B,GAAI,CACF,GAAI,CAAC7B,IAAI,CAACiC,EAAE,CAAE,CACZ,KAAM,IAAI,CAAAH,KAAK,CAAC,0BAA0B,CAAC,CAC7C,CAEA,KAAM,CAAAvB,QAAQ,CAAG,KAAM,CAAA3B,KAAK,CAAC4B,IAAI,CAAC,2CAA2C,CAAE,CAC7EG,MAAM,CAAEX,IAAI,CAACiC,EACf,CAAC,CAAC,CAEF,GAAI1B,QAAQ,CAACE,MAAM,GAAK,GAAG,CAAE,CAC3BH,QAAQ,CAAC,CACPf,IAAI,CAAEN,uBAAuB,CAC7BW,OAAO,CAAEW,QAAQ,CAACT,IAAI,CAACe,kBACzB,CAAC,CAAC,CACJ,CAAC,IAAM,CACLO,OAAO,CAACD,KAAK,CAAC,sCAAsC,CAAEZ,QAAQ,CAACT,IAAI,CAAC,CACtE,CACF,CAAE,MAAOqB,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,qCAAqC,CAAEA,KAAK,CAACE,OAAO,CAAC,CACrE,CACF,CAAC,CACH,CAAC,CAED,MAAO,MAAM,CAAAa,oBAAoB,CAAIhC,KAAK,EAAK,MAAOI,QAAQ,CAAEuB,QAAQ,GAAK,CAC3E,KAAM,CAAE7B,IAAK,CAAC,CAAG6B,QAAQ,CAAC,CAAC,CAE3B,GAAI,CAAC7B,IAAI,CAACW,MAAM,CAAE,CAChBS,OAAO,CAACD,KAAK,CAAC,0BAA0B,CAAC,CACzC,OACF,CAEA,GAAI,CACF,KAAM,CAAAZ,QAAQ,CAAG,KAAM,CAAA3B,KAAK,CAACuD,GAAG,CAAC,yCAAyC,CAAE,CAAExB,MAAM,CAAEX,IAAI,CAACW,MAAM,CAAEyB,QAAQ,CAAElC,KAAM,CAAC,CAAC,CACrH,GAAIK,QAAQ,CAACE,MAAM,GAAK,GAAG,CAAE,CAC3BH,QAAQ,CAAC,CACPf,IAAI,CAAEH,iBAAiB,CACvBQ,OAAO,CAAEM,KACX,CAAC,CAAC,CACJ,CACF,CAAE,MAAOiB,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,CAAEA,KAAK,CAACE,OAAO,CAAC,CACvD,CACF,CAAC,CAED,MAAO,MAAM,CAAAgB,uBAAuB,CAAIjC,QAAQ,EAAK,MAAOE,QAAQ,CAAEuB,QAAQ,GAAK,CACjF,KAAM,CAAE7B,IAAK,CAAC,CAAG6B,QAAQ,CAAC,CAAC,CAE3B,GAAI,CAAC7B,IAAI,CAACW,MAAM,CAAE,CAChBS,OAAO,CAACD,KAAK,CAAC,0BAA0B,CAAC,CACzC,OACF,CAEA,GAAI,CACF,KAAM,CAAAZ,QAAQ,CAAG,KAAM,CAAA3B,KAAK,CAACuD,GAAG,CAAC,4CAA4C,CAAE,CAAExB,MAAM,CAAEX,IAAI,CAACW,MAAM,CAAE2B,WAAW,CAAElC,QAAS,CAAC,CAAC,CAC9H,GAAIG,QAAQ,CAACE,MAAM,GAAK,GAAG,CAAE,CAC3BH,QAAQ,CAACH,kBAAkB,CAACC,QAAQ,CAAC,CAAC,CACxC,CACF,CAAE,MAAOe,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,CAAEA,KAAK,CAACE,OAAO,CAAC,CAC1D,CACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}