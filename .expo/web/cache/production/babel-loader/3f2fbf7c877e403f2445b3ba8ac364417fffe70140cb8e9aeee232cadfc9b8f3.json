{"ast":null,"code":"function _extends(){_extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}import*as React from'react';import I18nManager from\"react-native-web/dist/exports/I18nManager\";import InteractionManager from\"react-native-web/dist/exports/InteractionManager\";import Keyboard from\"react-native-web/dist/exports/Keyboard\";import Platform from\"react-native-web/dist/exports/Platform\";import StatusBar from\"react-native-web/dist/exports/StatusBar\";import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import View from\"react-native-web/dist/exports/View\";import Animated from'react-native-reanimated';import DrawerProgressContext from'../../utils/DrawerProgressContext';import{GestureState,PanGestureHandler}from'../GestureHandler';import Overlay from'./Overlay';const{Clock,Value,onChange,clockRunning,startClock,stopClock,spring,abs,add,and,block,call,cond,divide,eq,event,greaterThan,lessThan,max,min,multiply,neq,or,set,sub}=Animated;const TRUE=1;const FALSE=0;const NOOP=0;const UNSET=-1;const DIRECTION_LEFT=1;const DIRECTION_RIGHT=-1;const SWIPE_DISTANCE_MINIMUM=5;const DEFAULT_DRAWER_WIDTH='80%';const SPRING_CONFIG={stiffness:1000,damping:500,mass:3,overshootClamping:true,restDisplacementThreshold:0.01,restSpeedThreshold:0.01};const ANIMATED_ZERO=new Animated.Value(0);const ANIMATED_ONE=new Animated.Value(1);export default class DrawerView extends React.Component{componentDidUpdate(prevProps){const{open,drawerPosition,drawerType,swipeDistanceThreshold,swipeVelocityThreshold,hideStatusBarOnOpen:hideStatusBar}=this.props;if(typeof this.pendingOpenValue!=='boolean'||open!==this.pendingOpenValue){this.toggleDrawer(open);}this.pendingOpenValue=undefined;if(open!==prevProps.open&&hideStatusBar){this.toggleStatusBar(open);}if(prevProps.drawerPosition!==drawerPosition){this.drawerPosition.setValue(drawerPosition==='right'?DIRECTION_RIGHT:DIRECTION_LEFT);}if(prevProps.drawerType!==drawerType){this.isDrawerTypeFront.setValue(drawerType==='front'?TRUE:FALSE);}if(prevProps.swipeDistanceThreshold!==swipeDistanceThreshold){this.swipeDistanceThreshold.setValue(swipeDistanceThreshold);}if(prevProps.swipeVelocityThreshold!==swipeVelocityThreshold){this.swipeVelocityThreshold.setValue(swipeVelocityThreshold);}}componentWillUnmount(){this.toggleStatusBar(false);this.handleEndInteraction();}handleEndInteraction=()=>{if(this.interactionHandle!==undefined){InteractionManager.clearInteractionHandle(this.interactionHandle);this.interactionHandle=undefined;}};handleStartInteraction=()=>{if(this.interactionHandle===undefined){this.interactionHandle=InteractionManager.createInteractionHandle();}};getDrawerWidth=()=>{const{drawerStyle,dimensions}=this.props;const{width=DEFAULT_DRAWER_WIDTH}=StyleSheet.flatten(drawerStyle)||{};if(typeof width==='string'&&width.endsWith('%')){const percentage=Number(width.replace(/%$/,''));if(Number.isFinite(percentage)){return dimensions.width*(percentage/100);}}return typeof width==='number'?width:0;};clock=new Clock();isDrawerTypeFront=new Value(this.props.drawerType==='front'?TRUE:FALSE);isOpen=new Value(this.props.open?TRUE:FALSE);nextIsOpen=new Value(UNSET);isSwiping=new Value(FALSE);initialDrawerWidth=this.getDrawerWidth();gestureState=new Value(GestureState.UNDETERMINED);touchX=new Value(0);velocityX=new Value(0);gestureX=new Value(0);offsetX=new Value(0);position=new Value(this.props.open?this.initialDrawerWidth*(this.props.drawerPosition==='right'?DIRECTION_RIGHT:DIRECTION_LEFT):0);containerWidth=new Value(this.props.dimensions.width);drawerWidth=new Value(this.initialDrawerWidth);drawerOpacity=new Value(this.props.drawerType==='permanent'?1:0);drawerPosition=new Value(this.props.drawerPosition==='right'?DIRECTION_RIGHT:DIRECTION_LEFT);touchDistanceFromDrawer=cond(this.isDrawerTypeFront,cond(eq(this.drawerPosition,DIRECTION_LEFT),max(sub(sub(this.touchX,this.gestureX),this.drawerWidth),0),min(multiply(sub(sub(this.containerWidth,this.drawerWidth),sub(this.touchX,this.gestureX)),DIRECTION_RIGHT),0)),0);swipeDistanceThreshold=new Value(this.props.swipeDistanceThreshold);swipeVelocityThreshold=new Value(this.props.swipeVelocityThreshold);currentOpenValue=this.props.open;isStatusBarHidden=false;manuallyTriggerSpring=new Value(FALSE);transitionTo=isOpen=>{const toValue=new Value(0);const frameTime=new Value(0);const state={position:this.position,time:new Value(0),finished:new Value(FALSE),velocity:new Value(0)};return block([cond(clockRunning(this.clock),NOOP,[set(toValue,multiply(isOpen,this.drawerWidth,this.drawerPosition)),set(frameTime,0),set(state.time,0),set(state.finished,FALSE),set(state.velocity,this.velocityX),set(this.isOpen,isOpen),startClock(this.clock),call([],this.handleStartInteraction),set(this.manuallyTriggerSpring,FALSE)]),spring(this.clock,state,Object.assign({},SPRING_CONFIG,{toValue})),cond(state.finished,[set(this.touchX,0),set(this.gestureX,0),set(this.velocityX,0),set(this.offsetX,0),stopClock(this.clock),call([this.isOpen],_ref=>{let[value]=_ref;const open=Boolean(value);this.handleEndInteraction();if(open!==this.props.open){this.toggleDrawer(this.props.open);}})])]);};dragX=block([onChange(this.isOpen,call([this.isOpen],_ref2=>{let[value]=_ref2;const open=Boolean(value);this.currentOpenValue=open;if(open!==this.props.open){if(open){this.props.onOpen();}else{this.props.onClose();}this.pendingOpenValue=open;this.forceUpdate();}})),onChange(this.nextIsOpen,cond(neq(this.nextIsOpen,UNSET),[cond(clockRunning(this.clock),stopClock(this.clock)),set(this.isOpen,this.nextIsOpen),set(this.gestureX,0),set(this.nextIsOpen,UNSET)])),onChange(this.isSwiping,call([this.isSwiping],_ref3=>{let[value]=_ref3;const{keyboardDismissMode}=this.props;if(value===TRUE){if(keyboardDismissMode==='on-drag'){Keyboard.dismiss();}this.toggleStatusBar(true);}else{this.toggleStatusBar(this.currentOpenValue);}})),onChange(this.gestureState,cond(eq(this.gestureState,GestureState.ACTIVE),call([],this.handleStartInteraction))),cond(eq(this.gestureState,GestureState.ACTIVE),[cond(this.isSwiping,NOOP,[set(this.isSwiping,TRUE),set(this.offsetX,this.position)]),set(this.position,add(this.offsetX,this.gestureX,this.touchDistanceFromDrawer)),stopClock(this.clock)],[set(this.isSwiping,FALSE),set(this.touchX,0),this.transitionTo(cond(this.manuallyTriggerSpring,this.isOpen,cond(or(and(greaterThan(abs(this.gestureX),SWIPE_DISTANCE_MINIMUM),greaterThan(abs(this.velocityX),this.swipeVelocityThreshold)),greaterThan(abs(this.gestureX),this.swipeDistanceThreshold)),cond(eq(this.drawerPosition,DIRECTION_LEFT),greaterThan(cond(eq(this.velocityX,0),this.gestureX,this.velocityX),0),lessThan(cond(eq(this.velocityX,0),this.gestureX,this.velocityX),0)),this.isOpen)))]),this.position]);translateX=cond(eq(this.drawerPosition,DIRECTION_RIGHT),min(max(multiply(this.drawerWidth,-1),this.dragX),0),max(min(this.drawerWidth,this.dragX),0));progress=cond(eq(this.drawerWidth,0),0,abs(divide(this.translateX,this.drawerWidth)));handleGestureEvent=event([{nativeEvent:{x:this.touchX,translationX:this.gestureX,velocityX:this.velocityX}}]);handleGestureStateChange=event([{nativeEvent:{state:s=>set(this.gestureState,s)}}]);handleContainerLayout=e=>this.containerWidth.setValue(e.nativeEvent.layout.width);handleDrawerLayout=e=>{this.drawerWidth.setValue(e.nativeEvent.layout.width);this.toggleDrawer(this.props.open);requestAnimationFrame(()=>requestAnimationFrame(()=>this.drawerOpacity.setValue(1)));};toggleDrawer=open=>{if(this.currentOpenValue!==open){this.nextIsOpen.setValue(open?TRUE:FALSE);this.currentOpenValue=open;}};toggleStatusBar=hidden=>{const{hideStatusBarOnOpen:hideStatusBar,statusBarAnimation}=this.props;if(hideStatusBar&&this.isStatusBarHidden!==hidden){this.isStatusBarHidden=hidden;StatusBar.setHidden(hidden,statusBarAnimation);}};render(){const{open,swipeEnabled,drawerPosition,drawerType,swipeEdgeWidth,drawerStyle,overlayStyle,renderDrawerContent,renderSceneContent,gestureHandlerProps,overlayAccessibilityLabel}=this.props;const isOpen=drawerType==='permanent'?true:open;const isRight=drawerPosition==='right';const contentTranslateX=drawerType==='front'?ANIMATED_ZERO:this.translateX;const drawerTranslateX=drawerType==='back'?I18nManager.getConstants().isRTL?multiply(sub(this.containerWidth,this.drawerWidth),isRight?1:-1):ANIMATED_ZERO:this.translateX;const offset=drawerType==='back'?0:I18nManager.getConstants().isRTL?'100%':multiply(this.drawerWidth,-1);const hitSlop=isRight?{right:0,width:isOpen?undefined:swipeEdgeWidth}:{left:0,width:isOpen?undefined:swipeEdgeWidth};const progress=drawerType==='permanent'?ANIMATED_ONE:this.progress;return React.createElement(DrawerProgressContext.Provider,{value:progress},React.createElement(PanGestureHandler,_extends({activeOffsetX:[-SWIPE_DISTANCE_MINIMUM,SWIPE_DISTANCE_MINIMUM],failOffsetY:[-SWIPE_DISTANCE_MINIMUM,SWIPE_DISTANCE_MINIMUM],onGestureEvent:this.handleGestureEvent,onHandlerStateChange:this.handleGestureStateChange,hitSlop:hitSlop,enabled:drawerType!=='permanent'&&swipeEnabled},gestureHandlerProps),React.createElement(Animated.View,{onLayout:this.handleContainerLayout,style:[styles.main,{flexDirection:drawerType==='permanent'&&!isRight?'row-reverse':'row'}]},React.createElement(Animated.View,{style:[styles.content,{transform:drawerType==='permanent'?[]:[{translateX:contentTranslateX}]}]},React.createElement(View,{accessibilityElementsHidden:isOpen&&drawerType!=='permanent',importantForAccessibility:isOpen&&drawerType!=='permanent'?'no-hide-descendants':'auto',style:styles.content},renderSceneContent()),drawerType==='permanent'?null:React.createElement(Overlay,{progress:progress,onPress:()=>this.toggleDrawer(false),accessibilityLabel:overlayAccessibilityLabel,style:overlayStyle,accessibilityElementsHidden:!isOpen,importantForAccessibility:isOpen?'auto':'no-hide-descendants'})),React.createElement(Animated.Code,{exec:this.containerWidth}),drawerType==='permanent'?null:React.createElement(Animated.Code,{exec:block([onChange(this.manuallyTriggerSpring,[cond(eq(this.manuallyTriggerSpring,TRUE),[set(this.nextIsOpen,FALSE),call([],()=>this.currentOpenValue=false)])])])}),React.createElement(Animated.View,{removeClippedSubviews:true,onLayout:this.handleDrawerLayout,style:[styles.container,{transform:drawerType==='permanent'?[]:[{translateX:drawerTranslateX}],opacity:this.drawerOpacity},drawerType==='permanent'?isRight?{right:0}:{left:0}:[styles.nonPermanent,isRight?{right:offset}:{left:offset},{zIndex:drawerType==='back'?-1:0}],drawerStyle]},renderDrawerContent()))));}}const styles=StyleSheet.create({container:{backgroundColor:'white',maxWidth:'100%'},nonPermanent:{position:'absolute',top:0,bottom:0,width:DEFAULT_DRAWER_WIDTH},content:{flex:1},main:Object.assign({flex:1},null)});","map":{"version":3,"names":["React","I18nManager","InteractionManager","Keyboard","Platform","StatusBar","StyleSheet","View","Animated","DrawerProgressContext","GestureState","PanGestureHandler","Overlay","Clock","Value","onChange","clockRunning","startClock","stopClock","spring","abs","add","and","block","call","cond","divide","eq","event","greaterThan","lessThan","max","min","multiply","neq","or","set","sub","TRUE","FALSE","NOOP","UNSET","DIRECTION_LEFT","DIRECTION_RIGHT","SWIPE_DISTANCE_MINIMUM","DEFAULT_DRAWER_WIDTH","SPRING_CONFIG","stiffness","damping","mass","overshootClamping","restDisplacementThreshold","restSpeedThreshold","ANIMATED_ZERO","ANIMATED_ONE","DrawerView","Component","componentDidUpdate","prevProps","open","drawerPosition","drawerType","swipeDistanceThreshold","swipeVelocityThreshold","hideStatusBarOnOpen","hideStatusBar","props","pendingOpenValue","toggleDrawer","undefined","toggleStatusBar","setValue","isDrawerTypeFront","componentWillUnmount","handleEndInteraction","interactionHandle","clearInteractionHandle","handleStartInteraction","createInteractionHandle","getDrawerWidth","drawerStyle","dimensions","width","flatten","endsWith","percentage","Number","replace","isFinite","clock","isOpen","nextIsOpen","isSwiping","initialDrawerWidth","gestureState","UNDETERMINED","touchX","velocityX","gestureX","offsetX","position","containerWidth","drawerWidth","drawerOpacity","touchDistanceFromDrawer","currentOpenValue","isStatusBarHidden","manuallyTriggerSpring","transitionTo","toValue","frameTime","state","time","finished","velocity","Object","assign","_ref","value","Boolean","dragX","_ref2","onOpen","onClose","forceUpdate","_ref3","keyboardDismissMode","dismiss","ACTIVE","translateX","progress","handleGestureEvent","nativeEvent","x","translationX","handleGestureStateChange","s","handleContainerLayout","e","layout","handleDrawerLayout","requestAnimationFrame","hidden","statusBarAnimation","setHidden","render","swipeEnabled","swipeEdgeWidth","overlayStyle","renderDrawerContent","renderSceneContent","gestureHandlerProps","overlayAccessibilityLabel","isRight","contentTranslateX","drawerTranslateX","getConstants","isRTL","offset","hitSlop","right","left","createElement","Provider","_extends","activeOffsetX","failOffsetY","onGestureEvent","onHandlerStateChange","enabled","onLayout","style","styles","main","flexDirection","content","transform","accessibilityElementsHidden","importantForAccessibility","onPress","accessibilityLabel","Code","exec","removeClippedSubviews","container","opacity","nonPermanent","zIndex","create","backgroundColor","maxWidth","top","bottom","flex"],"sources":["C:\\Users\\Carlos\\Desktop\\LightingGrabberApp\\LightingGrabberApp\\node_modules\\@react-navigation\\drawer\\src\\views\\legacy\\Drawer.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  I18nManager,\n  InteractionManager,\n  Keyboard,\n  LayoutChangeEvent,\n  Platform,\n  StatusBar,\n  StyleSheet,\n  View,\n} from 'react-native';\nimport Animated from 'react-native-reanimated';\n\nimport type { DrawerProps } from '../../types';\nimport DrawerProgressContext from '../../utils/DrawerProgressContext';\nimport { GestureState, PanGestureHandler } from '../GestureHandler';\nimport Overlay from './Overlay';\n\nconst {\n  Clock,\n  Value,\n  onChange,\n  clockRunning,\n  startClock,\n  stopClock,\n  spring,\n  abs,\n  add,\n  and,\n  block,\n  call,\n  cond,\n  divide,\n  eq,\n  event,\n  greaterThan,\n  lessThan,\n  max,\n  min,\n  multiply,\n  neq,\n  or,\n  set,\n  sub,\n} = Animated;\n\nconst TRUE = 1;\nconst FALSE = 0;\nconst NOOP = 0;\nconst UNSET = -1;\n\nconst DIRECTION_LEFT = 1;\nconst DIRECTION_RIGHT = -1;\n\nconst SWIPE_DISTANCE_MINIMUM = 5;\n\nconst DEFAULT_DRAWER_WIDTH = '80%';\n\nconst SPRING_CONFIG = {\n  stiffness: 1000,\n  damping: 500,\n  mass: 3,\n  overshootClamping: true,\n  restDisplacementThreshold: 0.01,\n  restSpeedThreshold: 0.01,\n};\n\nconst ANIMATED_ZERO = new Animated.Value(0);\nconst ANIMATED_ONE = new Animated.Value(1);\n\ntype Binary = 0 | 1;\n\nexport default class DrawerView extends React.Component<DrawerProps> {\n  componentDidUpdate(prevProps: DrawerProps) {\n    const {\n      open,\n      drawerPosition,\n      drawerType,\n      swipeDistanceThreshold,\n      swipeVelocityThreshold,\n      hideStatusBarOnOpen: hideStatusBar,\n    } = this.props;\n\n    if (\n      // If we're not in the middle of a transition, sync the drawer's open state\n      typeof this.pendingOpenValue !== 'boolean' ||\n      open !== this.pendingOpenValue\n    ) {\n      this.toggleDrawer(open);\n    }\n\n    this.pendingOpenValue = undefined;\n\n    if (open !== prevProps.open && hideStatusBar) {\n      this.toggleStatusBar(open);\n    }\n\n    if (prevProps.drawerPosition !== drawerPosition) {\n      this.drawerPosition.setValue(\n        drawerPosition === 'right' ? DIRECTION_RIGHT : DIRECTION_LEFT\n      );\n    }\n\n    if (prevProps.drawerType !== drawerType) {\n      this.isDrawerTypeFront.setValue(drawerType === 'front' ? TRUE : FALSE);\n    }\n\n    if (prevProps.swipeDistanceThreshold !== swipeDistanceThreshold) {\n      this.swipeDistanceThreshold.setValue(swipeDistanceThreshold);\n    }\n\n    if (prevProps.swipeVelocityThreshold !== swipeVelocityThreshold) {\n      this.swipeVelocityThreshold.setValue(swipeVelocityThreshold);\n    }\n  }\n\n  componentWillUnmount() {\n    this.toggleStatusBar(false);\n    this.handleEndInteraction();\n  }\n\n  private handleEndInteraction = () => {\n    if (this.interactionHandle !== undefined) {\n      InteractionManager.clearInteractionHandle(this.interactionHandle);\n      this.interactionHandle = undefined;\n    }\n  };\n\n  private handleStartInteraction = () => {\n    if (this.interactionHandle === undefined) {\n      this.interactionHandle = InteractionManager.createInteractionHandle();\n    }\n  };\n\n  private getDrawerWidth = (): number => {\n    const { drawerStyle, dimensions } = this.props;\n    const { width = DEFAULT_DRAWER_WIDTH } =\n      StyleSheet.flatten(drawerStyle) || {};\n\n    if (typeof width === 'string' && width.endsWith('%')) {\n      // Try to calculate width if a percentage is given\n      const percentage = Number(width.replace(/%$/, ''));\n\n      if (Number.isFinite(percentage)) {\n        return dimensions.width * (percentage / 100);\n      }\n    }\n\n    return typeof width === 'number' ? width : 0;\n  };\n\n  private clock = new Clock();\n  private interactionHandle: number | undefined;\n\n  private isDrawerTypeFront = new Value<Binary>(\n    this.props.drawerType === 'front' ? TRUE : FALSE\n  );\n\n  private isOpen = new Value<Binary>(this.props.open ? TRUE : FALSE);\n  private nextIsOpen = new Value<Binary | -1>(UNSET);\n  private isSwiping = new Value<Binary>(FALSE);\n\n  private initialDrawerWidth = this.getDrawerWidth();\n\n  private gestureState = new Value<number>(GestureState.UNDETERMINED);\n  private touchX = new Value<number>(0);\n  private velocityX = new Value<number>(0);\n  private gestureX = new Value<number>(0);\n  private offsetX = new Value<number>(0);\n  private position = new Value<number>(\n    this.props.open\n      ? this.initialDrawerWidth *\n        (this.props.drawerPosition === 'right'\n          ? DIRECTION_RIGHT\n          : DIRECTION_LEFT)\n      : 0\n  );\n\n  private containerWidth = new Value<number>(this.props.dimensions.width);\n  private drawerWidth = new Value<number>(this.initialDrawerWidth);\n  private drawerOpacity = new Value<number>(\n    this.props.drawerType === 'permanent' ? 1 : 0\n  );\n  private drawerPosition = new Value<number>(\n    this.props.drawerPosition === 'right' ? DIRECTION_RIGHT : DIRECTION_LEFT\n  );\n\n  // Comment stolen from react-native-gesture-handler/DrawerLayout\n  //\n  // While closing the drawer when user starts gesture outside of its area (in greyed\n  // out part of the window), we want the drawer to follow only once finger reaches the\n  // edge of the drawer.\n  // E.g. on the diagram below drawer is illustrate by X signs and the greyed out area by\n  // dots. The touch gesture starts at '*' and moves left, touch path is indicated by\n  // an arrow pointing left\n  // 1) +---------------+ 2) +---------------+ 3) +---------------+ 4) +---------------+\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|.<-*..|    |XXXXXXXX|<--*..|    |XXXXX|<-----*..|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    +---------------+    +---------------+    +---------------+    +---------------+\n  //\n  // For the above to work properly we define animated value that will keep start position\n  // of the gesture. Then we use that value to calculate how much we need to subtract from\n  // the dragX. If the gesture started on the greyed out area we take the distance from the\n  // edge of the drawer to the start position. Otherwise we don't subtract at all and the\n  // drawer be pulled back as soon as you start the pan.\n  //\n  // This is used only when drawerType is \"front\"\n  private touchDistanceFromDrawer = cond(\n    this.isDrawerTypeFront,\n    cond(\n      eq(this.drawerPosition, DIRECTION_LEFT),\n      max(\n        // Distance of touch start from left screen edge - Drawer width\n        sub(sub(this.touchX, this.gestureX), this.drawerWidth),\n        0\n      ),\n      min(\n        multiply(\n          // Distance of drawer from left screen edge - Touch start point\n          sub(\n            sub(this.containerWidth, this.drawerWidth),\n            sub(this.touchX, this.gestureX)\n          ),\n          DIRECTION_RIGHT\n        ),\n        0\n      )\n    ),\n    0\n  );\n\n  private swipeDistanceThreshold = new Value<number>(\n    this.props.swipeDistanceThreshold\n  );\n  private swipeVelocityThreshold = new Value<number>(\n    this.props.swipeVelocityThreshold\n  );\n\n  private currentOpenValue: boolean = this.props.open;\n  private pendingOpenValue: boolean | undefined;\n\n  private isStatusBarHidden: boolean = false;\n\n  private manuallyTriggerSpring = new Value<Binary>(FALSE);\n\n  private transitionTo = (isOpen: number | Animated.Node<number>) => {\n    const toValue = new Value(0);\n    const frameTime = new Value(0);\n\n    const state = {\n      position: this.position,\n      time: new Value(0),\n      finished: new Value(FALSE),\n      velocity: new Value(0),\n    };\n\n    return block([\n      cond(clockRunning(this.clock), NOOP, [\n        // Animation wasn't running before\n        // Set the initial values and start the clock\n        set(toValue, multiply(isOpen, this.drawerWidth, this.drawerPosition)),\n        set(frameTime, 0),\n        set(state.time, 0),\n        set(state.finished, FALSE),\n        set(state.velocity, this.velocityX),\n        set(this.isOpen, isOpen),\n        startClock(this.clock),\n        call([], this.handleStartInteraction),\n        set(this.manuallyTriggerSpring, FALSE),\n      ]),\n      spring(this.clock, state, { ...SPRING_CONFIG, toValue }),\n      cond(state.finished, [\n        // Reset gesture and velocity from previous gesture\n        set(this.touchX, 0),\n        set(this.gestureX, 0),\n        set(this.velocityX, 0),\n        set(this.offsetX, 0),\n        // When the animation finishes, stop the clock\n        stopClock(this.clock),\n        call([this.isOpen], ([value]: readonly Binary[]) => {\n          const open = Boolean(value);\n          this.handleEndInteraction();\n\n          if (open !== this.props.open) {\n            // Sync drawer's state after animation finished\n            // This shouldn't be necessary, but there seems to be an issue on iOS\n            this.toggleDrawer(this.props.open);\n          }\n        }),\n      ]),\n    ]);\n  };\n\n  private dragX = block([\n    onChange(\n      this.isOpen,\n      call([this.isOpen], ([value]: readonly Binary[]) => {\n        const open = Boolean(value);\n\n        this.currentOpenValue = open;\n\n        // Without this check, the drawer can go to an infinite update <-> animate loop for sync updates\n        if (open !== this.props.open) {\n          // If the mode changed, update state\n          if (open) {\n            this.props.onOpen();\n          } else {\n            this.props.onClose();\n          }\n\n          this.pendingOpenValue = open;\n\n          // Force componentDidUpdate to fire, whether user does a setState or not\n          // This allows us to detect when the user drops the update and revert back\n          // It's necessary to make sure that the state stays in sync\n          this.forceUpdate();\n        }\n      })\n    ),\n    onChange(\n      this.nextIsOpen,\n      cond(neq(this.nextIsOpen, UNSET), [\n        // Stop any running animations\n        cond(clockRunning(this.clock), stopClock(this.clock)),\n        // Update the open value to trigger the transition\n        set(this.isOpen, this.nextIsOpen),\n        set(this.gestureX, 0),\n        set(this.nextIsOpen, UNSET),\n      ])\n    ),\n    // This block must be after the this.isOpen listener since we check for current value\n    onChange(\n      this.isSwiping,\n      // Listen to updates for this value only when it changes\n      // Without `onChange`, this will fire even if the value didn't change\n      // We don't want to call the listeners if the value didn't change\n      call([this.isSwiping], ([value]: readonly Binary[]) => {\n        const { keyboardDismissMode } = this.props;\n\n        if (value === TRUE) {\n          if (keyboardDismissMode === 'on-drag') {\n            Keyboard.dismiss();\n          }\n\n          this.toggleStatusBar(true);\n        } else {\n          this.toggleStatusBar(this.currentOpenValue);\n        }\n      })\n    ),\n    onChange(\n      this.gestureState,\n      cond(\n        eq(this.gestureState, GestureState.ACTIVE),\n        call([], this.handleStartInteraction)\n      )\n    ),\n    cond(\n      eq(this.gestureState, GestureState.ACTIVE),\n      [\n        cond(this.isSwiping, NOOP, [\n          // We weren't dragging before, set it to true\n          set(this.isSwiping, TRUE),\n          // Also update the drag offset to the last position\n          set(this.offsetX, this.position),\n        ]),\n        // Update position with previous offset + gesture distance\n        set(\n          this.position,\n          add(this.offsetX, this.gestureX, this.touchDistanceFromDrawer)\n        ),\n        // Stop animations while we're dragging\n        stopClock(this.clock),\n      ],\n      [\n        set(this.isSwiping, FALSE),\n        set(this.touchX, 0),\n        this.transitionTo(\n          cond(\n            this.manuallyTriggerSpring,\n            this.isOpen,\n            cond(\n              or(\n                and(\n                  greaterThan(abs(this.gestureX), SWIPE_DISTANCE_MINIMUM),\n                  greaterThan(abs(this.velocityX), this.swipeVelocityThreshold)\n                ),\n                greaterThan(abs(this.gestureX), this.swipeDistanceThreshold)\n              ),\n              cond(\n                eq(this.drawerPosition, DIRECTION_LEFT),\n                // If swiped to right, open the drawer, otherwise close it\n                greaterThan(\n                  cond(eq(this.velocityX, 0), this.gestureX, this.velocityX),\n                  0\n                ),\n                // If swiped to left, open the drawer, otherwise close it\n                lessThan(\n                  cond(eq(this.velocityX, 0), this.gestureX, this.velocityX),\n                  0\n                )\n              ),\n              this.isOpen\n            )\n          )\n        ),\n      ]\n    ),\n    this.position,\n  ]);\n\n  private translateX = cond(\n    eq(this.drawerPosition, DIRECTION_RIGHT),\n    min(max(multiply(this.drawerWidth, -1), this.dragX), 0),\n    max(min(this.drawerWidth, this.dragX), 0)\n  );\n\n  private progress = cond(\n    // Check if the drawer width is available to avoid division by zero\n    eq(this.drawerWidth, 0),\n    0,\n    abs(divide(this.translateX, this.drawerWidth))\n  );\n\n  private handleGestureEvent = event([\n    {\n      nativeEvent: {\n        x: this.touchX,\n        translationX: this.gestureX,\n        velocityX: this.velocityX,\n      },\n    },\n  ]);\n\n  private handleGestureStateChange = event([\n    {\n      nativeEvent: {\n        state: (s: Animated.Value<number>) => set(this.gestureState, s),\n      },\n    },\n  ]);\n\n  private handleContainerLayout = (e: LayoutChangeEvent) =>\n    this.containerWidth.setValue(e.nativeEvent.layout.width);\n\n  private handleDrawerLayout = (e: LayoutChangeEvent) => {\n    this.drawerWidth.setValue(e.nativeEvent.layout.width);\n    this.toggleDrawer(this.props.open);\n\n    // Until layout is available, drawer is hidden with opacity: 0 by default\n    // Show it in the next frame when layout is available\n    // If we don't delay it until the next frame, there's a visible flicker\n    requestAnimationFrame(() =>\n      requestAnimationFrame(() => this.drawerOpacity.setValue(1))\n    );\n  };\n\n  private toggleDrawer = (open: boolean) => {\n    if (this.currentOpenValue !== open) {\n      this.nextIsOpen.setValue(open ? TRUE : FALSE);\n\n      // This value will also be set shortly after as changing this.nextIsOpen changes this.isOpen\n      // However, there's a race condition on Android, so we need to set a bit earlier\n      this.currentOpenValue = open;\n    }\n  };\n\n  private toggleStatusBar = (hidden: boolean) => {\n    const { hideStatusBarOnOpen: hideStatusBar, statusBarAnimation } =\n      this.props;\n\n    if (hideStatusBar && this.isStatusBarHidden !== hidden) {\n      this.isStatusBarHidden = hidden;\n      StatusBar.setHidden(hidden, statusBarAnimation);\n    }\n  };\n\n  render() {\n    const {\n      open,\n      swipeEnabled,\n      drawerPosition,\n      drawerType,\n      swipeEdgeWidth,\n      drawerStyle,\n      overlayStyle,\n      renderDrawerContent,\n      renderSceneContent,\n      gestureHandlerProps,\n      overlayAccessibilityLabel,\n    } = this.props;\n\n    const isOpen = drawerType === 'permanent' ? true : open;\n    const isRight = drawerPosition === 'right';\n\n    const contentTranslateX =\n      drawerType === 'front' ? ANIMATED_ZERO : this.translateX;\n\n    const drawerTranslateX =\n      drawerType === 'back'\n        ? I18nManager.getConstants().isRTL\n          ? multiply(\n              sub(this.containerWidth, this.drawerWidth),\n              isRight ? 1 : -1\n            )\n          : ANIMATED_ZERO\n        : this.translateX;\n\n    const offset =\n      drawerType === 'back'\n        ? 0\n        : I18nManager.getConstants().isRTL\n        ? '100%'\n        : multiply(this.drawerWidth, -1);\n\n    // FIXME: Currently hitSlop is broken when on Android when drawer is on right\n    // https://github.com/software-mansion/react-native-gesture-handler/issues/569\n    const hitSlop = isRight\n      ? // Extend hitSlop to the side of the screen when drawer is closed\n        // This lets the user drag the drawer from the side of the screen\n        { right: 0, width: isOpen ? undefined : swipeEdgeWidth }\n      : { left: 0, width: isOpen ? undefined : swipeEdgeWidth };\n\n    const progress = drawerType === 'permanent' ? ANIMATED_ONE : this.progress;\n\n    return (\n      <DrawerProgressContext.Provider value={progress}>\n        <PanGestureHandler\n          activeOffsetX={[-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM]}\n          failOffsetY={[-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM]}\n          onGestureEvent={this.handleGestureEvent}\n          onHandlerStateChange={this.handleGestureStateChange}\n          hitSlop={hitSlop}\n          enabled={drawerType !== 'permanent' && swipeEnabled}\n          {...gestureHandlerProps}\n        >\n          <Animated.View\n            onLayout={this.handleContainerLayout}\n            style={[\n              styles.main,\n              {\n                flexDirection:\n                  drawerType === 'permanent' && !isRight\n                    ? 'row-reverse'\n                    : 'row',\n              },\n            ]}\n          >\n            <Animated.View\n              style={[\n                styles.content,\n                {\n                  transform:\n                    drawerType === 'permanent'\n                      ? // Reanimated needs the property to be present, but it results in Browser bug\n                        // https://bugs.chromium.org/p/chromium/issues/detail?id=20574\n                        []\n                      : [{ translateX: contentTranslateX }],\n                },\n              ]}\n            >\n              <View\n                accessibilityElementsHidden={\n                  isOpen && drawerType !== 'permanent'\n                }\n                importantForAccessibility={\n                  isOpen && drawerType !== 'permanent'\n                    ? 'no-hide-descendants'\n                    : 'auto'\n                }\n                style={styles.content}\n              >\n                {renderSceneContent()}\n              </View>\n              {\n                // Disable overlay if sidebar is permanent\n                drawerType === 'permanent' ? null : (\n                  <Overlay\n                    progress={progress}\n                    onPress={() => this.toggleDrawer(false)}\n                    accessibilityLabel={overlayAccessibilityLabel}\n                    style={overlayStyle as any}\n                    accessibilityElementsHidden={!isOpen}\n                    importantForAccessibility={\n                      isOpen ? 'auto' : 'no-hide-descendants'\n                    }\n                  />\n                )\n              }\n            </Animated.View>\n            <Animated.Code\n              // This is needed to make sure that container width updates with `setValue`\n              // Without this, it won't update when not used in styles\n              exec={this.containerWidth}\n            />\n            {drawerType === 'permanent' ? null : (\n              <Animated.Code\n                exec={block([\n                  onChange(this.manuallyTriggerSpring, [\n                    cond(eq(this.manuallyTriggerSpring, TRUE), [\n                      set(this.nextIsOpen, FALSE),\n                      call([], () => (this.currentOpenValue = false)),\n                    ]),\n                  ]),\n                ])}\n              />\n            )}\n            <Animated.View\n              removeClippedSubviews={Platform.OS !== 'ios'}\n              onLayout={this.handleDrawerLayout}\n              style={[\n                styles.container,\n                {\n                  transform:\n                    drawerType === 'permanent'\n                      ? // Reanimated needs the property to be present, but it results in Browser bug\n                        // https://bugs.chromium.org/p/chromium/issues/detail?id=20574\n                        []\n                      : [{ translateX: drawerTranslateX }],\n                  opacity: this.drawerOpacity,\n                },\n                drawerType === 'permanent'\n                  ? // Without this, the `left`/`right` values don't get reset\n                    isRight\n                    ? { right: 0 }\n                    : { left: 0 }\n                  : [\n                      styles.nonPermanent,\n                      isRight ? { right: offset } : { left: offset },\n                      { zIndex: drawerType === 'back' ? -1 : 0 },\n                    ],\n                drawerStyle as any,\n              ]}\n            >\n              {renderDrawerContent()}\n            </Animated.View>\n          </Animated.View>\n        </PanGestureHandler>\n      </DrawerProgressContext.Provider>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: 'white',\n    maxWidth: '100%',\n  },\n  nonPermanent: {\n    position: 'absolute',\n    top: 0,\n    bottom: 0,\n    width: DEFAULT_DRAWER_WIDTH,\n  },\n  content: {\n    flex: 1,\n  },\n  main: {\n    flex: 1,\n    ...Platform.select({\n      // FIXME: We need to hide `overflowX` on Web so the translated content doesn't show offscreen.\n      // But adding `overflowX: 'hidden'` prevents content from collapsing the URL bar.\n      web: null,\n      default: { overflow: 'hidden' },\n    }),\n  },\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}