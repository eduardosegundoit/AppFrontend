{"ast":null,"code":"import _objectWithoutPropertiesLoose from\"@babel/runtime/helpers/objectWithoutPropertiesLoose\";const _excluded=[\"to\",\"action\"];import*as React from'react';import Platform from\"react-native-web/dist/exports/Platform\";import Text from\"react-native-web/dist/exports/Text\";import useLinkProps from'./useLinkProps';export default function Link(_ref){let{to,action}=_ref,rest=_objectWithoutPropertiesLoose(_ref,_excluded);const props=useLinkProps({to,action});const onPress=e=>{if('onPress'in rest){var _rest$onPress;(_rest$onPress=rest.onPress)===null||_rest$onPress===void 0?void 0:_rest$onPress.call(rest,e);}props.onPress(e);};return React.createElement(Text,Object.assign({},props,rest,{onClick:onPress}));}","map":{"version":3,"names":["React","Platform","Text","useLinkProps","Link","_ref","to","action","rest","_objectWithoutPropertiesLoose","_excluded","props","onPress","e","_rest$onPress","call","createElement","Object","assign","onClick"],"sources":["C:\\Users\\Carlos\\Desktop\\LightingGrabberApp\\LightingGrabberApp\\node_modules\\@react-navigation\\native\\src\\Link.tsx"],"sourcesContent":["import type { NavigationAction } from '@react-navigation/core';\nimport * as React from 'react';\nimport { GestureResponderEvent, Platform, Text, TextProps } from 'react-native';\n\nimport useLinkProps from './useLinkProps';\nimport type { To } from './useLinkTo';\n\ntype Props<ParamList extends ReactNavigation.RootParamList> = {\n  to: To<ParamList>;\n  action?: NavigationAction;\n  target?: string;\n  onPress?: (\n    e: React.MouseEvent<HTMLAnchorElement, MouseEvent> | GestureResponderEvent\n  ) => void;\n} & (Omit<TextProps, 'disabled'> & {\n  disabled?: boolean | null;\n  children: React.ReactNode;\n});\n\n/**\n * Component to render link to another screen using a path.\n * Uses an anchor tag on the web.\n *\n * @param props.to Absolute path to screen (e.g. `/feeds/hot`).\n * @param props.action Optional action to use for in-page navigation. By default, the path is parsed to an action based on linking config.\n * @param props.children Child elements to render the content.\n */\nexport default function Link<ParamList extends ReactNavigation.RootParamList>({\n  to,\n  action,\n  ...rest\n}: Props<ParamList>) {\n  const props = useLinkProps<ParamList>({ to, action });\n\n  const onPress = (\n    e: React.MouseEvent<HTMLAnchorElement, MouseEvent> | GestureResponderEvent\n  ) => {\n    if ('onPress' in rest) {\n      rest.onPress?.(e);\n    }\n\n    props.onPress(e);\n  };\n\n  return React.createElement(Text, {\n    ...props,\n    ...rest,\n    ...Platform.select({\n      web: { onClick: onPress } as any,\n      default: { onPress },\n    }),\n  });\n}\n"],"mappings":"+HACA,MAAO,GAAK,CAAAA,KAAK,KAAM,OAAO,QAAAC,QAAA,qDAAAC,IAAA,0CAG9B,MAAO,CAAAC,YAAY,KAAM,gBAAgB,CAuBzC,cAAe,SAAS,CAAAC,IAAIA,CAAAC,IAAA,CAIP,IAJyD,CAC5EC,EAAE,CACFC,MAEgB,CAAC,CAAAF,IAAA,CADdG,IAAA,CAAAC,6BAAA,CACcJ,IAAA,CAAAK,SAAA,EACjB,KAAM,CAAAC,KAAK,CAAGR,YAAY,CAAY,CAAEG,EAAE,CAAEC,MAAO,CAAC,CAAC,CAErD,KAAM,CAAAK,OAAO,CACXC,CAA0E,EACvE,CACH,GAAI,SAAS,EAAI,CAAAL,IAAI,CAAE,KAAAM,aAAA,CACrB,CAAAA,aAAA,CAAAN,IAAI,CAACI,OAAO,UAAAE,aAAA,iBAAZA,aAAA,CAAAC,IAAA,CAAAP,IAAI,CAAWK,CAAC,CAAC,CACnB,CAEAF,KAAK,CAACC,OAAO,CAACC,CAAC,CAAC,CAClB,CAAC,CAED,MAAO,CAAAb,KAAK,CAACgB,aAAa,CAACd,IAAI,CAAAe,MAAA,CAAAC,MAAA,IAC1BP,KAAK,CACLH,IAAI,CAEA,CAAEW,OAAO,CAAEP,OAAQ,CAAQ,CAGnC,CAAC,CACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}