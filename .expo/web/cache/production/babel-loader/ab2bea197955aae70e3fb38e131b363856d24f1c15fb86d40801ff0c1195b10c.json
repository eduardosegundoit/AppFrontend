{"ast":null,"code":"import _objectWithoutPropertiesLoose from\"@babel/runtime/helpers/objectWithoutPropertiesLoose\";const _excluded=[\"state\",\"descriptors\"];function _extends(){_extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}import{HeaderShownContext,SafeAreaProviderCompat}from'@react-navigation/elements';import{StackActions}from'@react-navigation/native';import*as React from'react';import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import View from\"react-native-web/dist/exports/View\";import{SafeAreaInsetsContext}from'react-native-safe-area-context';import ModalPresentationContext from'../../utils/ModalPresentationContext';import{GestureHandlerRootView}from'../GestureHandler';import HeaderContainer from'../Header/HeaderContainer';import CardStack from'./CardStack';const GestureHandlerWrapper=GestureHandlerRootView??View;const isArrayEqual=(a,b)=>a.length===b.length&&a.every((it,index)=>it===b[index]);export default class StackView extends React.Component{static getDerivedStateFromProps(props,state){if((props.state.routes===state.previousRoutes||isArrayEqual(props.state.routes.map(r=>r.key),state.previousRoutes.map(r=>r.key)))&&state.routes.length){let routes=state.routes;let previousRoutes=state.previousRoutes;let descriptors=props.descriptors;let previousDescriptors=state.previousDescriptors;if(props.descriptors!==state.previousDescriptors){descriptors=state.routes.reduce((acc,route)=>{acc[route.key]=props.descriptors[route.key]||state.descriptors[route.key];return acc;},{});previousDescriptors=props.descriptors;}if(props.state.routes!==state.previousRoutes){const map=props.state.routes.reduce((acc,route)=>{acc[route.key]=route;return acc;},{});routes=state.routes.map(route=>map[route.key]||route);previousRoutes=props.state.routes;}return{routes,previousRoutes,descriptors,previousDescriptors};}let routes=props.state.index<props.state.routes.length-1?props.state.routes.slice(0,props.state.index+1):props.state.routes;let{openingRouteKeys,closingRouteKeys,replacingRouteKeys,previousRoutes}=state;const previousFocusedRoute=previousRoutes[previousRoutes.length-1];const nextFocusedRoute=routes[routes.length-1];const isAnimationEnabled=key=>{const descriptor=props.descriptors[key]||state.descriptors[key];return descriptor?descriptor.options.animationEnabled!==false:true;};const getAnimationTypeForReplace=key=>{const descriptor=props.descriptors[key]||state.descriptors[key];return descriptor.options.animationTypeForReplace??'push';};if(previousFocusedRoute&&previousFocusedRoute.key!==nextFocusedRoute.key){if(!previousRoutes.some(r=>r.key===nextFocusedRoute.key)){if(isAnimationEnabled(nextFocusedRoute.key)&&!openingRouteKeys.includes(nextFocusedRoute.key)){openingRouteKeys=[...openingRouteKeys,nextFocusedRoute.key];closingRouteKeys=closingRouteKeys.filter(key=>key!==nextFocusedRoute.key);replacingRouteKeys=replacingRouteKeys.filter(key=>key!==nextFocusedRoute.key);if(!routes.some(r=>r.key===previousFocusedRoute.key)){openingRouteKeys=openingRouteKeys.filter(key=>key!==previousFocusedRoute.key);if(getAnimationTypeForReplace(nextFocusedRoute.key)==='pop'){closingRouteKeys=[...closingRouteKeys,previousFocusedRoute.key];openingRouteKeys=openingRouteKeys.filter(key=>key!==nextFocusedRoute.key);routes=[...routes,previousFocusedRoute];}else{replacingRouteKeys=[...replacingRouteKeys,previousFocusedRoute.key];closingRouteKeys=closingRouteKeys.filter(key=>key!==previousFocusedRoute.key);routes=routes.slice();routes.splice(routes.length-1,0,previousFocusedRoute);}}}}else if(!routes.some(r=>r.key===previousFocusedRoute.key)){if(isAnimationEnabled(previousFocusedRoute.key)&&!closingRouteKeys.includes(previousFocusedRoute.key)){closingRouteKeys=[...closingRouteKeys,previousFocusedRoute.key];openingRouteKeys=openingRouteKeys.filter(key=>key!==previousFocusedRoute.key);replacingRouteKeys=replacingRouteKeys.filter(key=>key!==previousFocusedRoute.key);routes=[...routes,previousFocusedRoute];}}else{}}else if(replacingRouteKeys.length||closingRouteKeys.length){routes=routes.slice();routes.splice(routes.length-1,0,...state.routes.filter(_ref=>{let{key}=_ref;return isAnimationEnabled(key)?replacingRouteKeys.includes(key)||closingRouteKeys.includes(key):false;}));}if(!routes.length){throw new Error('There should always be at least one route in the navigation state.');}const descriptors=routes.reduce((acc,route)=>{acc[route.key]=props.descriptors[route.key]||state.descriptors[route.key];return acc;},{});return{routes,previousRoutes:props.state.routes,previousDescriptors:props.descriptors,openingRouteKeys,closingRouteKeys,replacingRouteKeys,descriptors};}state={routes:[],previousRoutes:[],previousDescriptors:{},openingRouteKeys:[],closingRouteKeys:[],replacingRouteKeys:[],descriptors:{}};getPreviousRoute=_ref2=>{let{route}=_ref2;const{closingRouteKeys,replacingRouteKeys}=this.state;const routes=this.state.routes.filter(r=>r.key===route.key||!closingRouteKeys.includes(r.key)&&!replacingRouteKeys.includes(r.key));const index=routes.findIndex(r=>r.key===route.key);return routes[index-1];};renderScene=_ref3=>{let{route}=_ref3;const descriptor=this.state.descriptors[route.key]||this.props.descriptors[route.key];if(!descriptor){return null;}return descriptor.render();};renderHeader=props=>{return React.createElement(HeaderContainer,props);};handleOpenRoute=_ref4=>{let{route}=_ref4;const{state,navigation}=this.props;const{closingRouteKeys,replacingRouteKeys}=this.state;if(closingRouteKeys.some(key=>key===route.key)&&replacingRouteKeys.every(key=>key!==route.key)&&state.routeNames.includes(route.name)&&!state.routes.some(r=>r.key===route.key)){navigation.navigate(route);}else{this.setState(state=>({routes:state.replacingRouteKeys.length?state.routes.filter(r=>!state.replacingRouteKeys.includes(r.key)):state.routes,openingRouteKeys:state.openingRouteKeys.filter(key=>key!==route.key),closingRouteKeys:state.closingRouteKeys.filter(key=>key!==route.key),replacingRouteKeys:[]}));}};handleCloseRoute=_ref5=>{let{route}=_ref5;const{state,navigation}=this.props;if(state.routes.some(r=>r.key===route.key)){navigation.dispatch(Object.assign({},StackActions.pop(),{source:route.key,target:state.key}));}else{this.setState(state=>({routes:state.routes.filter(r=>r.key!==route.key),openingRouteKeys:state.openingRouteKeys.filter(key=>key!==route.key),closingRouteKeys:state.closingRouteKeys.filter(key=>key!==route.key)}));}};handleTransitionStart=(_ref6,closing)=>{let{route}=_ref6;return this.props.navigation.emit({type:'transitionStart',data:{closing},target:route.key});};handleTransitionEnd=(_ref7,closing)=>{let{route}=_ref7;return this.props.navigation.emit({type:'transitionEnd',data:{closing},target:route.key});};handleGestureStart=_ref8=>{let{route}=_ref8;this.props.navigation.emit({type:'gestureStart',target:route.key});};handleGestureEnd=_ref9=>{let{route}=_ref9;this.props.navigation.emit({type:'gestureEnd',target:route.key});};handleGestureCancel=_ref10=>{let{route}=_ref10;this.props.navigation.emit({type:'gestureCancel',target:route.key});};render(){const _this$props=this.props,{state}=_this$props,rest=_objectWithoutPropertiesLoose(_this$props,_excluded);const{routes,descriptors,openingRouteKeys,closingRouteKeys}=this.state;return React.createElement(GestureHandlerWrapper,{style:styles.container},React.createElement(SafeAreaProviderCompat,null,React.createElement(SafeAreaInsetsContext.Consumer,null,insets=>React.createElement(ModalPresentationContext.Consumer,null,isParentModal=>React.createElement(HeaderShownContext.Consumer,null,isParentHeaderShown=>React.createElement(CardStack,_extends({insets:insets,isParentHeaderShown:isParentHeaderShown,isParentModal:isParentModal,getPreviousRoute:this.getPreviousRoute,routes:routes,openingRouteKeys:openingRouteKeys,closingRouteKeys:closingRouteKeys,onOpenRoute:this.handleOpenRoute,onCloseRoute:this.handleCloseRoute,onTransitionStart:this.handleTransitionStart,onTransitionEnd:this.handleTransitionEnd,renderHeader:this.renderHeader,renderScene:this.renderScene,state:state,descriptors:descriptors,onGestureStart:this.handleGestureStart,onGestureEnd:this.handleGestureEnd,onGestureCancel:this.handleGestureCancel},rest)))))));}}const styles=StyleSheet.create({container:{flex:1}});","map":{"version":3,"names":["HeaderShownContext","SafeAreaProviderCompat","StackActions","React","StyleSheet","View","SafeAreaInsetsContext","ModalPresentationContext","GestureHandlerRootView","HeaderContainer","CardStack","GestureHandlerWrapper","isArrayEqual","a","b","length","every","it","index","StackView","Component","getDerivedStateFromProps","props","state","routes","previousRoutes","map","r","key","descriptors","previousDescriptors","reduce","acc","route","slice","openingRouteKeys","closingRouteKeys","replacingRouteKeys","previousFocusedRoute","nextFocusedRoute","isAnimationEnabled","descriptor","options","animationEnabled","getAnimationTypeForReplace","animationTypeForReplace","some","includes","filter","splice","_ref","Error","getPreviousRoute","_ref2","findIndex","renderScene","_ref3","render","renderHeader","createElement","handleOpenRoute","_ref4","navigation","routeNames","name","navigate","setState","handleCloseRoute","_ref5","dispatch","Object","assign","pop","source","target","handleTransitionStart","_ref6","closing","emit","type","data","handleTransitionEnd","_ref7","handleGestureStart","_ref8","handleGestureEnd","_ref9","handleGestureCancel","_ref10","_this$props","rest","_objectWithoutPropertiesLoose","_excluded","style","styles","container","Consumer","insets","isParentModal","isParentHeaderShown","_extends","onOpenRoute","onCloseRoute","onTransitionStart","onTransitionEnd","onGestureStart","onGestureEnd","onGestureCancel","create","flex"],"sources":["C:\\Users\\Carlos\\Desktop\\LightingGrabberApp\\LightingGrabberApp\\node_modules\\@react-navigation\\stack\\src\\views\\Stack\\StackView.tsx"],"sourcesContent":["import {\n  HeaderShownContext,\n  SafeAreaProviderCompat,\n} from '@react-navigation/elements';\nimport {\n  ParamListBase,\n  Route,\n  StackActions,\n  StackNavigationState,\n} from '@react-navigation/native';\nimport * as React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport {\n  EdgeInsets,\n  SafeAreaInsetsContext,\n} from 'react-native-safe-area-context';\n\nimport type {\n  StackDescriptorMap,\n  StackNavigationConfig,\n  StackNavigationHelpers,\n} from '../../types';\nimport ModalPresentationContext from '../../utils/ModalPresentationContext';\nimport { GestureHandlerRootView } from '../GestureHandler';\nimport HeaderContainer, {\n  Props as HeaderContainerProps,\n} from '../Header/HeaderContainer';\nimport CardStack from './CardStack';\n\ntype Props = StackNavigationConfig & {\n  state: StackNavigationState<ParamListBase>;\n  navigation: StackNavigationHelpers;\n  descriptors: StackDescriptorMap;\n};\n\ntype State = {\n  // Local copy of the routes which are actually rendered\n  routes: Route<string>[];\n  // Previous routes, to compare whether routes have changed or not\n  previousRoutes: Route<string>[];\n  // Previous descriptors, to compare whether descriptors have changed or not\n  previousDescriptors: StackDescriptorMap;\n  // List of routes being opened, we need to animate pushing of these new routes\n  openingRouteKeys: string[];\n  // List of routes being closed, we need to animate popping of these routes\n  closingRouteKeys: string[];\n  // List of routes being replaced, we need to keep a copy until the new route animates in\n  replacingRouteKeys: string[];\n  // Since the local routes can vary from the routes from props, we need to keep the descriptors for old routes\n  // Otherwise we won't be able to access the options for routes that were removed\n  descriptors: StackDescriptorMap;\n};\n\nconst GestureHandlerWrapper = GestureHandlerRootView ?? View;\n\n/**\n * Compare two arrays with primitive values as the content.\n * We need to make sure that both values and order match.\n */\nconst isArrayEqual = (a: any[], b: any[]) =>\n  a.length === b.length && a.every((it, index) => it === b[index]);\n\nexport default class StackView extends React.Component<Props, State> {\n  static getDerivedStateFromProps(\n    props: Readonly<Props>,\n    state: Readonly<State>\n  ) {\n    // If there was no change in routes, we don't need to compute anything\n    if (\n      (props.state.routes === state.previousRoutes ||\n        isArrayEqual(\n          props.state.routes.map((r) => r.key),\n          state.previousRoutes.map((r) => r.key)\n        )) &&\n      state.routes.length\n    ) {\n      let routes = state.routes;\n      let previousRoutes = state.previousRoutes;\n      let descriptors = props.descriptors;\n      let previousDescriptors = state.previousDescriptors;\n\n      if (props.descriptors !== state.previousDescriptors) {\n        descriptors = state.routes.reduce<StackDescriptorMap>((acc, route) => {\n          acc[route.key] =\n            props.descriptors[route.key] || state.descriptors[route.key];\n\n          return acc;\n        }, {});\n\n        previousDescriptors = props.descriptors;\n      }\n\n      if (props.state.routes !== state.previousRoutes) {\n        // if any route objects have changed, we should update them\n        const map = props.state.routes.reduce<Record<string, Route<string>>>(\n          (acc, route) => {\n            acc[route.key] = route;\n            return acc;\n          },\n          {}\n        );\n\n        routes = state.routes.map((route) => map[route.key] || route);\n        previousRoutes = props.state.routes;\n      }\n\n      return {\n        routes,\n        previousRoutes,\n        descriptors,\n        previousDescriptors,\n      };\n    }\n\n    // Here we determine which routes were added or removed to animate them\n    // We keep a copy of the route being removed in local state to be able to animate it\n\n    let routes =\n      props.state.index < props.state.routes.length - 1\n        ? // Remove any extra routes from the state\n          // The last visible route should be the focused route, i.e. at current index\n          props.state.routes.slice(0, props.state.index + 1)\n        : props.state.routes;\n\n    // Now we need to determine which routes were added and removed\n    let {\n      openingRouteKeys,\n      closingRouteKeys,\n      replacingRouteKeys,\n      previousRoutes,\n    } = state;\n\n    const previousFocusedRoute = previousRoutes[previousRoutes.length - 1] as\n      | Route<string>\n      | undefined;\n    const nextFocusedRoute = routes[routes.length - 1];\n\n    const isAnimationEnabled = (key: string) => {\n      const descriptor = props.descriptors[key] || state.descriptors[key];\n\n      return descriptor ? descriptor.options.animationEnabled !== false : true;\n    };\n\n    const getAnimationTypeForReplace = (key: string) => {\n      const descriptor = props.descriptors[key] || state.descriptors[key];\n\n      return descriptor.options.animationTypeForReplace ?? 'push';\n    };\n\n    if (\n      previousFocusedRoute &&\n      previousFocusedRoute.key !== nextFocusedRoute.key\n    ) {\n      // We only need to animate routes if the focused route changed\n      // Animating previous routes won't be visible coz the focused route is on top of everything\n\n      if (!previousRoutes.some((r) => r.key === nextFocusedRoute.key)) {\n        // A new route has come to the focus, we treat this as a push\n        // A replace can also trigger this, the animation should look like push\n\n        if (\n          isAnimationEnabled(nextFocusedRoute.key) &&\n          !openingRouteKeys.includes(nextFocusedRoute.key)\n        ) {\n          // In this case, we need to animate pushing the focused route\n          // We don't care about animating any other added routes because they won't be visible\n          openingRouteKeys = [...openingRouteKeys, nextFocusedRoute.key];\n\n          closingRouteKeys = closingRouteKeys.filter(\n            (key) => key !== nextFocusedRoute.key\n          );\n          replacingRouteKeys = replacingRouteKeys.filter(\n            (key) => key !== nextFocusedRoute.key\n          );\n\n          if (!routes.some((r) => r.key === previousFocusedRoute.key)) {\n            // The previous focused route isn't present in state, we treat this as a replace\n\n            openingRouteKeys = openingRouteKeys.filter(\n              (key) => key !== previousFocusedRoute.key\n            );\n\n            if (getAnimationTypeForReplace(nextFocusedRoute.key) === 'pop') {\n              closingRouteKeys = [\n                ...closingRouteKeys,\n                previousFocusedRoute.key,\n              ];\n\n              // By default, new routes have a push animation, so we add it to `openingRouteKeys` before\n              // But since user configured it to animate the old screen like a pop, we need to add this without animation\n              // So remove it from `openingRouteKeys` which will remove the animation\n              openingRouteKeys = openingRouteKeys.filter(\n                (key) => key !== nextFocusedRoute.key\n              );\n\n              // Keep the route being removed at the end to animate it out\n              routes = [...routes, previousFocusedRoute];\n            } else {\n              replacingRouteKeys = [\n                ...replacingRouteKeys,\n                previousFocusedRoute.key,\n              ];\n\n              closingRouteKeys = closingRouteKeys.filter(\n                (key) => key !== previousFocusedRoute.key\n              );\n\n              // Keep the old route in the state because it's visible under the new route, and removing it will feel abrupt\n              // We need to insert it just before the focused one (the route being pushed)\n              // After the push animation is completed, routes being replaced will be removed completely\n              routes = routes.slice();\n              routes.splice(routes.length - 1, 0, previousFocusedRoute);\n            }\n          }\n        }\n      } else if (!routes.some((r) => r.key === previousFocusedRoute.key)) {\n        // The previously focused route was removed, we treat this as a pop\n\n        if (\n          isAnimationEnabled(previousFocusedRoute.key) &&\n          !closingRouteKeys.includes(previousFocusedRoute.key)\n        ) {\n          closingRouteKeys = [...closingRouteKeys, previousFocusedRoute.key];\n\n          // Sometimes a route can be closed before the opening animation finishes\n          // So we also need to remove it from the opening list\n          openingRouteKeys = openingRouteKeys.filter(\n            (key) => key !== previousFocusedRoute.key\n          );\n          replacingRouteKeys = replacingRouteKeys.filter(\n            (key) => key !== previousFocusedRoute.key\n          );\n\n          // Keep a copy of route being removed in the state to be able to animate it\n          routes = [...routes, previousFocusedRoute];\n        }\n      } else {\n        // Looks like some routes were re-arranged and no focused routes were added/removed\n        // i.e. the currently focused route already existed and the previously focused route still exists\n        // We don't know how to animate this\n      }\n    } else if (replacingRouteKeys.length || closingRouteKeys.length) {\n      // Keep the routes we are closing or replacing if animation is enabled for them\n      routes = routes.slice();\n      routes.splice(\n        routes.length - 1,\n        0,\n        ...state.routes.filter(({ key }) =>\n          isAnimationEnabled(key)\n            ? replacingRouteKeys.includes(key) || closingRouteKeys.includes(key)\n            : false\n        )\n      );\n    }\n\n    if (!routes.length) {\n      throw new Error(\n        'There should always be at least one route in the navigation state.'\n      );\n    }\n\n    const descriptors = routes.reduce<StackDescriptorMap>((acc, route) => {\n      acc[route.key] =\n        props.descriptors[route.key] || state.descriptors[route.key];\n\n      return acc;\n    }, {});\n\n    return {\n      routes,\n      previousRoutes: props.state.routes,\n      previousDescriptors: props.descriptors,\n      openingRouteKeys,\n      closingRouteKeys,\n      replacingRouteKeys,\n      descriptors,\n    };\n  }\n\n  state: State = {\n    routes: [],\n    previousRoutes: [],\n    previousDescriptors: {},\n    openingRouteKeys: [],\n    closingRouteKeys: [],\n    replacingRouteKeys: [],\n    descriptors: {},\n  };\n\n  private getPreviousRoute = ({ route }: { route: Route<string> }) => {\n    const { closingRouteKeys, replacingRouteKeys } = this.state;\n    const routes = this.state.routes.filter(\n      (r) =>\n        r.key === route.key ||\n        (!closingRouteKeys.includes(r.key) &&\n          !replacingRouteKeys.includes(r.key))\n    );\n\n    const index = routes.findIndex((r) => r.key === route.key);\n\n    return routes[index - 1];\n  };\n\n  private renderScene = ({ route }: { route: Route<string> }) => {\n    const descriptor =\n      this.state.descriptors[route.key] || this.props.descriptors[route.key];\n\n    if (!descriptor) {\n      return null;\n    }\n\n    return descriptor.render();\n  };\n\n  private renderHeader = (props: HeaderContainerProps) => {\n    return <HeaderContainer {...props} />;\n  };\n\n  private handleOpenRoute = ({ route }: { route: Route<string> }) => {\n    const { state, navigation } = this.props;\n    const { closingRouteKeys, replacingRouteKeys } = this.state;\n\n    if (\n      closingRouteKeys.some((key) => key === route.key) &&\n      replacingRouteKeys.every((key) => key !== route.key) &&\n      state.routeNames.includes(route.name) &&\n      !state.routes.some((r) => r.key === route.key)\n    ) {\n      // If route isn't present in current state, but was closing, assume that a close animation was cancelled\n      // So we need to add this route back to the state\n      navigation.navigate(route);\n    } else {\n      this.setState((state) => ({\n        routes: state.replacingRouteKeys.length\n          ? state.routes.filter(\n              (r) => !state.replacingRouteKeys.includes(r.key)\n            )\n          : state.routes,\n        openingRouteKeys: state.openingRouteKeys.filter(\n          (key) => key !== route.key\n        ),\n        closingRouteKeys: state.closingRouteKeys.filter(\n          (key) => key !== route.key\n        ),\n        replacingRouteKeys: [],\n      }));\n    }\n  };\n\n  private handleCloseRoute = ({ route }: { route: Route<string> }) => {\n    const { state, navigation } = this.props;\n\n    if (state.routes.some((r) => r.key === route.key)) {\n      // If a route exists in state, trigger a pop\n      // This will happen in when the route was closed from the card component\n      // e.g. When the close animation triggered from a gesture ends\n      navigation.dispatch({\n        ...StackActions.pop(),\n        source: route.key,\n        target: state.key,\n      });\n    } else {\n      // We need to clean up any state tracking the route and pop it immediately\n      this.setState((state) => ({\n        routes: state.routes.filter((r) => r.key !== route.key),\n        openingRouteKeys: state.openingRouteKeys.filter(\n          (key) => key !== route.key\n        ),\n        closingRouteKeys: state.closingRouteKeys.filter(\n          (key) => key !== route.key\n        ),\n      }));\n    }\n  };\n\n  private handleTransitionStart = (\n    { route }: { route: Route<string> },\n    closing: boolean\n  ) =>\n    this.props.navigation.emit({\n      type: 'transitionStart',\n      data: { closing },\n      target: route.key,\n    });\n\n  private handleTransitionEnd = (\n    { route }: { route: Route<string> },\n    closing: boolean\n  ) =>\n    this.props.navigation.emit({\n      type: 'transitionEnd',\n      data: { closing },\n      target: route.key,\n    });\n\n  private handleGestureStart = ({ route }: { route: Route<string> }) => {\n    this.props.navigation.emit({\n      type: 'gestureStart',\n      target: route.key,\n    });\n  };\n\n  private handleGestureEnd = ({ route }: { route: Route<string> }) => {\n    this.props.navigation.emit({\n      type: 'gestureEnd',\n      target: route.key,\n    });\n  };\n\n  private handleGestureCancel = ({ route }: { route: Route<string> }) => {\n    this.props.navigation.emit({\n      type: 'gestureCancel',\n      target: route.key,\n    });\n  };\n\n  render() {\n    const {\n      state,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      descriptors: _,\n      ...rest\n    } = this.props;\n\n    const { routes, descriptors, openingRouteKeys, closingRouteKeys } =\n      this.state;\n\n    return (\n      <GestureHandlerWrapper style={styles.container}>\n        <SafeAreaProviderCompat>\n          <SafeAreaInsetsContext.Consumer>\n            {(insets) => (\n              <ModalPresentationContext.Consumer>\n                {(isParentModal) => (\n                  <HeaderShownContext.Consumer>\n                    {(isParentHeaderShown) => (\n                      <CardStack\n                        insets={insets as EdgeInsets}\n                        isParentHeaderShown={isParentHeaderShown}\n                        isParentModal={isParentModal}\n                        getPreviousRoute={this.getPreviousRoute}\n                        routes={routes}\n                        openingRouteKeys={openingRouteKeys}\n                        closingRouteKeys={closingRouteKeys}\n                        onOpenRoute={this.handleOpenRoute}\n                        onCloseRoute={this.handleCloseRoute}\n                        onTransitionStart={this.handleTransitionStart}\n                        onTransitionEnd={this.handleTransitionEnd}\n                        renderHeader={this.renderHeader}\n                        renderScene={this.renderScene}\n                        state={state}\n                        descriptors={descriptors}\n                        onGestureStart={this.handleGestureStart}\n                        onGestureEnd={this.handleGestureEnd}\n                        onGestureCancel={this.handleGestureCancel}\n                        {...rest}\n                      />\n                    )}\n                  </HeaderShownContext.Consumer>\n                )}\n              </ModalPresentationContext.Consumer>\n            )}\n          </SafeAreaInsetsContext.Consumer>\n        </SafeAreaProviderCompat>\n      </GestureHandlerWrapper>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}