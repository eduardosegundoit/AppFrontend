{"ast":null,"code":"import _objectWithoutPropertiesLoose from\"@babel/runtime/helpers/objectWithoutPropertiesLoose\";const _excluded=[\"children\",\"style\",\"onPress\",\"onLongPress\",\"onPressIn\",\"onPressOut\",\"to\",\"accessibilityRole\"],_excluded2=[\"icon\",\"label\",\"labelStyle\",\"to\",\"focused\",\"allowFontScaling\",\"activeTintColor\",\"inactiveTintColor\",\"activeBackgroundColor\",\"inactiveBackgroundColor\",\"style\",\"onPress\",\"pressColor\",\"pressOpacity\",\"testID\",\"accessibilityLabel\"];function _extends(){_extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}import{PlatformPressable}from'@react-navigation/elements';import{Link,useTheme}from'@react-navigation/native';import Color from'color';import*as React from'react';import Platform from\"react-native-web/dist/exports/Platform\";import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import Text from\"react-native-web/dist/exports/Text\";import View from\"react-native-web/dist/exports/View\";const LinkPressable=_ref=>{let{children,style,onPress,onLongPress,onPressIn,onPressOut,to,accessibilityRole}=_ref,rest=_objectWithoutPropertiesLoose(_ref,_excluded);if(true&&to){return React.createElement(Link,_extends({},rest,{to:to,style:[styles.button,style],onPress:e=>{if(!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)&&(e.button==null||e.button===0)){e.preventDefault();onPress===null||onPress===void 0?void 0:onPress(e);}},onLongPress:onLongPress??undefined,onPressIn:onPressIn??undefined,onPressOut:onPressOut??undefined}),children);}else{return React.createElement(PlatformPressable,_extends({},rest,{accessibilityRole:accessibilityRole,onPress:onPress}),React.createElement(View,{style:style},children));}};export default function DrawerItem(props){const{colors}=useTheme();const{icon,label,labelStyle,to,focused=false,allowFontScaling,activeTintColor=colors.primary,inactiveTintColor=Color(colors.text).alpha(0.68).rgb().string(),activeBackgroundColor=Color(activeTintColor).alpha(0.12).rgb().string(),inactiveBackgroundColor='transparent',style,onPress,pressColor,pressOpacity,testID,accessibilityLabel}=props,rest=_objectWithoutPropertiesLoose(props,_excluded2);const{borderRadius=4}=StyleSheet.flatten(style||{});const color=focused?activeTintColor:inactiveTintColor;const backgroundColor=focused?activeBackgroundColor:inactiveBackgroundColor;const iconNode=icon?icon({size:24,focused,color}):null;return React.createElement(View,_extends({collapsable:false},rest,{style:[styles.container,{borderRadius,backgroundColor},style]}),React.createElement(LinkPressable,{testID:testID,onPress:onPress,style:[styles.wrapper,{borderRadius}],accessibilityLabel:accessibilityLabel,accessibilityRole:\"button\",accessibilityState:{selected:focused},pressColor:pressColor,pressOpacity:pressOpacity,to:to},React.createElement(React.Fragment,null,iconNode,React.createElement(View,{style:[styles.label,{marginLeft:iconNode?32:0,marginVertical:5}]},typeof label==='string'?React.createElement(Text,{numberOfLines:1,allowFontScaling:allowFontScaling,style:[{color,fontWeight:'500'},labelStyle]},label):label({color,focused})))));}const styles=StyleSheet.create({container:{marginHorizontal:10,marginVertical:4,overflow:'hidden'},wrapper:{flexDirection:'row',alignItems:'center',padding:8},label:{marginRight:32,flex:1},button:{display:'flex'}});","map":{"version":3,"names":["PlatformPressable","Link","useTheme","Color","React","Platform","StyleSheet","Text","View","LinkPressable","_ref","children","style","onPress","onLongPress","onPressIn","onPressOut","to","accessibilityRole","rest","_objectWithoutPropertiesLoose","_excluded","createElement","_extends","styles","button","e","metaKey","altKey","ctrlKey","shiftKey","preventDefault","undefined","DrawerItem","props","colors","icon","label","labelStyle","focused","allowFontScaling","activeTintColor","primary","inactiveTintColor","text","alpha","rgb","string","activeBackgroundColor","inactiveBackgroundColor","pressColor","pressOpacity","testID","accessibilityLabel","_excluded2","borderRadius","flatten","color","backgroundColor","iconNode","size","collapsable","container","wrapper","accessibilityState","selected","Fragment","marginLeft","marginVertical","numberOfLines","fontWeight","create","marginHorizontal","overflow","flexDirection","alignItems","padding","marginRight","flex","display"],"sources":["C:\\Users\\Carlos\\Desktop\\LightingGrabberApp\\LightingGrabberApp\\node_modules\\@react-navigation\\drawer\\src\\views\\DrawerItem.tsx"],"sourcesContent":["import { PlatformPressable } from '@react-navigation/elements';\nimport { Link, useTheme } from '@react-navigation/native';\nimport Color from 'color';\nimport * as React from 'react';\nimport {\n  Platform,\n  StyleProp,\n  StyleSheet,\n  Text,\n  TextStyle,\n  View,\n  ViewStyle,\n} from 'react-native';\n\ntype Props = {\n  /**\n   * The label text of the item.\n   */\n  label:\n    | string\n    | ((props: { focused: boolean; color: string }) => React.ReactNode);\n  /**\n   * Icon to display for the `DrawerItem`.\n   */\n  icon?: (props: {\n    focused: boolean;\n    size: number;\n    color: string;\n  }) => React.ReactNode;\n  /**\n   * URL to use for the link to the tab.\n   */\n  to?: string;\n  /**\n   * Whether to highlight the drawer item as active.\n   */\n  focused?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress: () => void;\n  /**\n   * Color for the icon and label when the item is active.\n   */\n  activeTintColor?: string;\n  /**\n   * Color for the icon and label when the item is inactive.\n   */\n  inactiveTintColor?: string;\n  /**\n   * Background color for item when its active.\n   */\n  activeBackgroundColor?: string;\n  /**\n   * Background color for item when its inactive.\n   */\n  inactiveBackgroundColor?: string;\n  /**\n   * Color of the touchable effect on press.\n   * Only supported on Android.\n   *\n   * @platform android\n   */\n  pressColor?: string;\n  /**\n   * Opacity of the touchable effect on press.\n   * Only supported on iOS.\n   *\n   * @platform ios\n   */\n  pressOpacity?: number;\n  /**\n   * Style object for the label element.\n   */\n  labelStyle?: StyleProp<TextStyle>;\n  /**\n   * Style object for the wrapper element.\n   */\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Whether label font should scale to respect Text Size accessibility settings.\n   */\n  allowFontScaling?: boolean;\n\n  /**\n   * Accessibility label for drawer item.\n   */\n  accessibilityLabel?: string;\n  /**\n   * ID to locate this drawer item in tests.\n   */\n  testID?: string;\n};\n\nconst LinkPressable = ({\n  children,\n  style,\n  onPress,\n  onLongPress,\n  onPressIn,\n  onPressOut,\n  to,\n  accessibilityRole,\n  ...rest\n}: Omit<React.ComponentProps<typeof PlatformPressable>, 'style'> & {\n  style: StyleProp<ViewStyle>;\n} & {\n  to?: string;\n  children: React.ReactNode;\n  onPress?: () => void;\n}) => {\n  if (Platform.OS === 'web' && to) {\n    // React Native Web doesn't forward `onClick` if we use `TouchableWithoutFeedback`.\n    // We need to use `onClick` to be able to prevent default browser handling of links.\n    return (\n      <Link\n        {...rest}\n        to={to}\n        style={[styles.button, style]}\n        onPress={(e: any) => {\n          if (\n            !(e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) && // ignore clicks with modifier keys\n            (e.button == null || e.button === 0) // ignore everything but left clicks\n          ) {\n            e.preventDefault();\n            onPress?.(e);\n          }\n        }}\n        // types for PressableProps and TextProps are incompatible with each other by `null` so we\n        // can't use {...rest} for these 3 props\n        onLongPress={onLongPress ?? undefined}\n        onPressIn={onPressIn ?? undefined}\n        onPressOut={onPressOut ?? undefined}\n      >\n        {children}\n      </Link>\n    );\n  } else {\n    return (\n      <PlatformPressable\n        {...rest}\n        accessibilityRole={accessibilityRole}\n        onPress={onPress}\n      >\n        <View style={style}>{children}</View>\n      </PlatformPressable>\n    );\n  }\n};\n\n/**\n * A component used to show an action item with an icon and a label in a navigation drawer.\n */\nexport default function DrawerItem(props: Props) {\n  const { colors } = useTheme();\n\n  const {\n    icon,\n    label,\n    labelStyle,\n    to,\n    focused = false,\n    allowFontScaling,\n    activeTintColor = colors.primary,\n    inactiveTintColor = Color(colors.text).alpha(0.68).rgb().string(),\n    activeBackgroundColor = Color(activeTintColor).alpha(0.12).rgb().string(),\n    inactiveBackgroundColor = 'transparent',\n    style,\n    onPress,\n    pressColor,\n    pressOpacity,\n    testID,\n    accessibilityLabel,\n    ...rest\n  } = props;\n\n  const { borderRadius = 4 } = StyleSheet.flatten(style || {});\n  const color = focused ? activeTintColor : inactiveTintColor;\n  const backgroundColor = focused\n    ? activeBackgroundColor\n    : inactiveBackgroundColor;\n\n  const iconNode = icon ? icon({ size: 24, focused, color }) : null;\n\n  return (\n    <View\n      collapsable={false}\n      {...rest}\n      style={[styles.container, { borderRadius, backgroundColor }, style]}\n    >\n      <LinkPressable\n        testID={testID}\n        onPress={onPress}\n        style={[styles.wrapper, { borderRadius }]}\n        accessibilityLabel={accessibilityLabel}\n        accessibilityRole=\"button\"\n        accessibilityState={{ selected: focused }}\n        pressColor={pressColor}\n        pressOpacity={pressOpacity}\n        to={to}\n      >\n        <React.Fragment>\n          {iconNode}\n          <View\n            style={[\n              styles.label,\n              { marginLeft: iconNode ? 32 : 0, marginVertical: 5 },\n            ]}\n          >\n            {typeof label === 'string' ? (\n              <Text\n                numberOfLines={1}\n                allowFontScaling={allowFontScaling}\n                style={[\n                  {\n                    color,\n                    fontWeight: '500',\n                  },\n                  labelStyle,\n                ]}\n              >\n                {label}\n              </Text>\n            ) : (\n              label({ color, focused })\n            )}\n          </View>\n        </React.Fragment>\n      </LinkPressable>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    marginHorizontal: 10,\n    marginVertical: 4,\n    overflow: 'hidden',\n  },\n  wrapper: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    padding: 8,\n  },\n  label: {\n    marginRight: 32,\n    flex: 1,\n  },\n  button: {\n    display: 'flex',\n  },\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}