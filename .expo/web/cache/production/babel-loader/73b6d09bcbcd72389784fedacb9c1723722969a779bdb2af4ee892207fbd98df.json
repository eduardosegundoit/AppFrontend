{"ast":null,"code":"import _objectWithoutPropertiesLoose from\"@babel/runtime/helpers/objectWithoutPropertiesLoose\";const _excluded=[\"id\",\"initialRouteName\",\"defaultStatus\",\"backBehavior\",\"children\",\"screenListeners\",\"screenOptions\"],_excluded2=[\"openByDefault\",\"lazy\",\"drawerContentOptions\"];function _extends(){_extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}import{createNavigatorFactory,DrawerRouter,useNavigationBuilder}from'@react-navigation/native';import*as React from'react';import warnOnce from'warn-once';import DrawerView from'../views/DrawerView';function DrawerNavigator(_ref){let{id,initialRouteName,defaultStatus:customDefaultStatus,backBehavior,children,screenListeners,screenOptions}=_ref,restWithDeprecated=_objectWithoutPropertiesLoose(_ref,_excluded);const{openByDefault,lazy,drawerContentOptions}=restWithDeprecated,rest=_objectWithoutPropertiesLoose(restWithDeprecated,_excluded2);let defaultScreenOptions={};if(drawerContentOptions){Object.assign(defaultScreenOptions,{drawerPosition:drawerContentOptions.drawerPosition,drawerType:drawerContentOptions.drawerType,swipeEdgeWidth:drawerContentOptions.edgeWidth,drawerHideStatusBarOnOpen:drawerContentOptions.hideStatusBar,keyboardDismissMode:drawerContentOptions.keyboardDismissMode,swipeMinDistance:drawerContentOptions.minSwipeDistance,overlayColor:drawerContentOptions.overlayColor,drawerStatusBarAnimation:drawerContentOptions.statusBarAnimation,gestureHandlerProps:drawerContentOptions.gestureHandlerProps});Object.keys(defaultScreenOptions).forEach(key=>{if(defaultScreenOptions[key]===undefined){delete defaultScreenOptions[key];}});warnOnce(drawerContentOptions,`Drawer Navigator: 'drawerContentOptions' is deprecated. Migrate the options to 'screenOptions' instead.\\n\\nPlace the following in 'screenOptions' in your code to keep current behavior:\\n\\n${JSON.stringify(defaultScreenOptions,null,2)}\\n\\nSee https://reactnavigation.org/docs/drawer-navigator#options for more details.`);}if(typeof lazy==='boolean'){defaultScreenOptions.lazy=lazy;warnOnce(true,`Drawer Navigator: 'lazy' in props is deprecated. Move it to 'screenOptions' instead.\\n\\nSee https://reactnavigation.org/docs/drawer-navigator/#lazy for more details.`);}if(typeof openByDefault==='boolean'){warnOnce(true,`Drawer Navigator: 'openByDefault' is deprecated. Use 'defaultStatus' and set it to 'open' or 'closed' instead.\\n\\nSee https://reactnavigation.org/docs/drawer-navigator/#defaultstatus for more details.`);}const defaultStatus=customDefaultStatus!==undefined?customDefaultStatus:openByDefault?'open':'closed';const{state,descriptors,navigation,NavigationContent}=useNavigationBuilder(DrawerRouter,{id,initialRouteName,defaultStatus,backBehavior,children,screenListeners,screenOptions,defaultScreenOptions});return React.createElement(NavigationContent,null,React.createElement(DrawerView,_extends({},rest,{defaultStatus:defaultStatus,state:state,descriptors:descriptors,navigation:navigation})));}export default createNavigatorFactory(DrawerNavigator);","map":{"version":3,"names":["createNavigatorFactory","DrawerRouter","useNavigationBuilder","React","warnOnce","DrawerView","DrawerNavigator","_ref","id","initialRouteName","defaultStatus","customDefaultStatus","backBehavior","children","screenListeners","screenOptions","restWithDeprecated","_objectWithoutPropertiesLoose","_excluded","openByDefault","lazy","drawerContentOptions","rest","_excluded2","defaultScreenOptions","Object","assign","drawerPosition","drawerType","swipeEdgeWidth","edgeWidth","drawerHideStatusBarOnOpen","hideStatusBar","keyboardDismissMode","swipeMinDistance","minSwipeDistance","overlayColor","drawerStatusBarAnimation","statusBarAnimation","gestureHandlerProps","keys","forEach","key","undefined","JSON","stringify","state","descriptors","navigation","NavigationContent","createElement","_extends"],"sources":["C:\\Users\\Carlos\\Desktop\\LightingGrabberApp\\LightingGrabberApp\\node_modules\\@react-navigation\\drawer\\src\\navigators\\createDrawerNavigator.tsx"],"sourcesContent":["import {\n  createNavigatorFactory,\n  DefaultNavigatorOptions,\n  DrawerActionHelpers,\n  DrawerNavigationState,\n  DrawerRouter,\n  DrawerRouterOptions,\n  DrawerStatus,\n  ParamListBase,\n  useNavigationBuilder,\n} from '@react-navigation/native';\nimport * as React from 'react';\nimport warnOnce from 'warn-once';\n\nimport type {\n  DrawerNavigationConfig,\n  DrawerNavigationEventMap,\n  DrawerNavigationOptions,\n} from '../types';\nimport DrawerView from '../views/DrawerView';\n\ntype Props = DefaultNavigatorOptions<\n  ParamListBase,\n  DrawerNavigationState<ParamListBase>,\n  DrawerNavigationOptions,\n  DrawerNavigationEventMap\n> &\n  DrawerRouterOptions &\n  DrawerNavigationConfig;\n\nfunction DrawerNavigator({\n  id,\n  initialRouteName,\n  defaultStatus: customDefaultStatus,\n  backBehavior,\n  children,\n  screenListeners,\n  screenOptions,\n  ...restWithDeprecated\n}: Props) {\n  const {\n    // @ts-expect-error: openByDefault is deprecated\n    openByDefault,\n    // @ts-expect-error: lazy is deprecated\n    lazy,\n    // @ts-expect-error: drawerContentOptions is deprecated\n    drawerContentOptions,\n    ...rest\n  } = restWithDeprecated;\n\n  let defaultScreenOptions: DrawerNavigationOptions = {};\n\n  if (drawerContentOptions) {\n    Object.assign(defaultScreenOptions, {\n      drawerPosition: drawerContentOptions.drawerPosition,\n      drawerType: drawerContentOptions.drawerType,\n      swipeEdgeWidth: drawerContentOptions.edgeWidth,\n      drawerHideStatusBarOnOpen: drawerContentOptions.hideStatusBar,\n      keyboardDismissMode: drawerContentOptions.keyboardDismissMode,\n      swipeMinDistance: drawerContentOptions.minSwipeDistance,\n      overlayColor: drawerContentOptions.overlayColor,\n      drawerStatusBarAnimation: drawerContentOptions.statusBarAnimation,\n      gestureHandlerProps: drawerContentOptions.gestureHandlerProps,\n    });\n\n    (\n      Object.keys(defaultScreenOptions) as (keyof DrawerNavigationOptions)[]\n    ).forEach((key) => {\n      if (defaultScreenOptions[key] === undefined) {\n        // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n        delete defaultScreenOptions[key];\n      }\n    });\n\n    warnOnce(\n      drawerContentOptions,\n      `Drawer Navigator: 'drawerContentOptions' is deprecated. Migrate the options to 'screenOptions' instead.\\n\\nPlace the following in 'screenOptions' in your code to keep current behavior:\\n\\n${JSON.stringify(\n        defaultScreenOptions,\n        null,\n        2\n      )}\\n\\nSee https://reactnavigation.org/docs/drawer-navigator#options for more details.`\n    );\n  }\n\n  if (typeof lazy === 'boolean') {\n    defaultScreenOptions.lazy = lazy;\n\n    warnOnce(\n      true,\n      `Drawer Navigator: 'lazy' in props is deprecated. Move it to 'screenOptions' instead.\\n\\nSee https://reactnavigation.org/docs/drawer-navigator/#lazy for more details.`\n    );\n  }\n\n  if (typeof openByDefault === 'boolean') {\n    warnOnce(\n      true,\n      `Drawer Navigator: 'openByDefault' is deprecated. Use 'defaultStatus' and set it to 'open' or 'closed' instead.\\n\\nSee https://reactnavigation.org/docs/drawer-navigator/#defaultstatus for more details.`\n    );\n  }\n\n  const defaultStatus: DrawerStatus =\n    customDefaultStatus !== undefined\n      ? customDefaultStatus\n      : openByDefault\n      ? 'open'\n      : 'closed';\n\n  const { state, descriptors, navigation, NavigationContent } =\n    useNavigationBuilder<\n      DrawerNavigationState<ParamListBase>,\n      DrawerRouterOptions,\n      DrawerActionHelpers<ParamListBase>,\n      DrawerNavigationOptions,\n      DrawerNavigationEventMap\n    >(DrawerRouter, {\n      id,\n      initialRouteName,\n      defaultStatus,\n      backBehavior,\n      children,\n      screenListeners,\n      screenOptions,\n      defaultScreenOptions,\n    });\n\n  return (\n    <NavigationContent>\n      <DrawerView\n        {...rest}\n        defaultStatus={defaultStatus}\n        state={state}\n        descriptors={descriptors}\n        navigation={navigation}\n      />\n    </NavigationContent>\n  );\n}\n\nexport default createNavigatorFactory<\n  DrawerNavigationState<ParamListBase>,\n  DrawerNavigationOptions,\n  DrawerNavigationEventMap,\n  typeof DrawerNavigator\n>(DrawerNavigator);\n"],"mappings":"2jBAAA,OACEA,sBAAsB,CAItBC,YAAY,CAIZC,oBAAoB,KACf,0BAA0B,CACjC,MAAO,GAAK,CAAAC,KAAK,KAAM,OAAO,CAC9B,MAAO,CAAAC,QAAQ,KAAM,WAAW,CAOhC,MAAO,CAAAC,UAAU,KAAM,qBAAqB,CAW5C,QAAS,CAAAC,eAAeA,CAAAC,IAAA,CASd,IATe,CACvBC,EAAE,CACFC,gBAAgB,CAChBC,aAAa,CAAEC,mBAAmB,CAClCC,YAAY,CACZC,QAAQ,CACRC,eAAe,CACfC,aAEK,CAAC,CAAAR,IAAA,CADHS,kBAAA,CAAAC,6BAAA,CACGV,IAAA,CAAAW,SAAA,EACN,KAAM,CAEJC,aAAa,CAEbC,IAAI,CAEJC,oBAEF,CAAC,CAAGL,kBAAkB,CADjBM,IAAA,CAAAL,6BAAA,CACDD,kBAAkB,CAAAO,UAAA,EAEtB,GAAI,CAAAC,oBAA6C,CAAG,CAAC,CAAC,CAEtD,GAAIH,oBAAoB,CAAE,CACxBI,MAAM,CAACC,MAAM,CAACF,oBAAoB,CAAE,CAClCG,cAAc,CAAEN,oBAAoB,CAACM,cAAc,CACnDC,UAAU,CAAEP,oBAAoB,CAACO,UAAU,CAC3CC,cAAc,CAAER,oBAAoB,CAACS,SAAS,CAC9CC,yBAAyB,CAAEV,oBAAoB,CAACW,aAAa,CAC7DC,mBAAmB,CAAEZ,oBAAoB,CAACY,mBAAmB,CAC7DC,gBAAgB,CAAEb,oBAAoB,CAACc,gBAAgB,CACvDC,YAAY,CAAEf,oBAAoB,CAACe,YAAY,CAC/CC,wBAAwB,CAAEhB,oBAAoB,CAACiB,kBAAkB,CACjEC,mBAAmB,CAAElB,oBAAoB,CAACkB,mBAC5C,CAAC,CAAC,CAGAd,MAAM,CAACe,IAAI,CAAChB,oBAAoB,CAAC,CACjCiB,OAAO,CAAEC,GAAG,EAAK,CACjB,GAAIlB,oBAAoB,CAACkB,GAAG,CAAC,GAAKC,SAAS,CAAE,CAE3C,MAAO,CAAAnB,oBAAoB,CAACkB,GAAG,CAAC,CAClC,CACF,CAAC,CAAC,CAEFtC,QAAQ,CACNiB,oBAAoB,CACnB,+LAA8LuB,IAAI,CAACC,SAAS,CAC3MrB,oBAAoB,CACpB,IAAI,CACJ,CAAC,CACD,qFAAoF,CACvF,CACH,CAEA,GAAI,MAAO,CAAAJ,IAAI,GAAK,SAAS,CAAE,CAC7BI,oBAAoB,CAACJ,IAAI,CAAGA,IAAI,CAEhChB,QAAQ,CACN,IAAI,CACH,uKAAsK,CACxK,CACH,CAEA,GAAI,MAAO,CAAAe,aAAa,GAAK,SAAS,CAAE,CACtCf,QAAQ,CACN,IAAI,CACH,0MAAyM,CAC3M,CACH,CAEA,KAAM,CAAAM,aAA2B,CAC/BC,mBAAmB,GAAKgC,SAAS,CAC7BhC,mBAAmB,CACnBQ,aAAa,CACb,MAAM,CACN,QAAQ,CAEd,KAAM,CAAE2B,KAAK,CAAEC,WAAW,CAAEC,UAAU,CAAEC,iBAAkB,CAAC,CACzD/C,oBAAoB,CAMlBD,YAAY,CAAE,CACdO,EAAE,CACFC,gBAAgB,CAChBC,aAAa,CACbE,YAAY,CACZC,QAAQ,CACRC,eAAe,CACfC,aAAa,CACbS,oBACF,CAAC,CAAC,CAEJ,MACE,CAAArB,KAAA,CAAA+C,aAAA,CAACD,iBAAiB,MAChB9C,KAAA,CAAA+C,aAAA,CAAC7C,UAAU,CAAA8C,QAAA,IACL7B,IAAI,EACRZ,aAAa,CAAEA,aAAc,CAC7BoC,KAAK,CAAEA,KAAM,CACbC,WAAW,CAAEA,WAAY,CACzBC,UAAU,CAAEA,UAAW,GACvB,CACgB,CAExB,CAEA,cAAe,CAAAhD,sBAAsB,CAKnCM,eAAe,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}