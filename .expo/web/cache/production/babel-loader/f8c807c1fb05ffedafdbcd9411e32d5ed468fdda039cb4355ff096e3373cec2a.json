{"ast":null,"code":"import{Background,getDefaultHeaderHeight,SafeAreaProviderCompat}from'@react-navigation/elements';import Color from'color';import*as React from'react';import Animated from\"react-native-web/dist/exports/Animated\";import Platform from\"react-native-web/dist/exports/Platform\";import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import{forModalPresentationIOS,forNoAnimation as forNoAnimationCard}from'../../TransitionConfigs/CardStyleInterpolators';import{DefaultTransition,ModalFadeTransition,ModalTransition}from'../../TransitionConfigs/TransitionPresets';import findLastIndex from'../../utils/findLastIndex';import getDistanceForDirection from'../../utils/getDistanceForDirection';import{MaybeScreen,MaybeScreenContainer}from'../Screens';import{getIsModalPresentation}from'./Card';import CardContainer from'./CardContainer';const EPSILON=1e-5;const STATE_INACTIVE=0;const STATE_TRANSITIONING_OR_BELOW_TOP=1;const STATE_ON_TOP=2;const FALLBACK_DESCRIPTOR=Object.freeze({options:{}});const getInterpolationIndex=(scenes,index)=>{const{cardStyleInterpolator}=scenes[index].descriptor.options;let interpolationIndex=0;for(let i=index-1;i>=0;i--){var _scenes$i;const cardStyleInterpolatorCurrent=(_scenes$i=scenes[i])===null||_scenes$i===void 0?void 0:_scenes$i.descriptor.options.cardStyleInterpolator;if(cardStyleInterpolatorCurrent!==cardStyleInterpolator){break;}interpolationIndex++;}return interpolationIndex;};const getIsModal=(scene,interpolationIndex,isParentModal)=>{if(isParentModal){return true;}const{cardStyleInterpolator}=scene.descriptor.options;const isModalPresentation=getIsModalPresentation(cardStyleInterpolator);const isModal=isModalPresentation&&interpolationIndex!==0;return isModal;};const getHeaderHeights=(scenes,insets,isParentHeaderShown,isParentModal,layout,previous)=>{return scenes.reduce((acc,curr,index)=>{const{headerStatusBarHeight=isParentHeaderShown?0:insets.top,headerStyle}=curr.descriptor.options;const style=StyleSheet.flatten(headerStyle||{});const height='height'in style&&typeof style.height==='number'?style.height:previous[curr.route.key];const interpolationIndex=getInterpolationIndex(scenes,index);const isModal=getIsModal(curr,interpolationIndex,isParentModal);acc[curr.route.key]=typeof height==='number'?height:getDefaultHeaderHeight(layout,isModal,headerStatusBarHeight);return acc;},{});};const getDistanceFromOptions=(layout,descriptor)=>{const{presentation,gestureDirection=presentation==='modal'?ModalTransition.gestureDirection:DefaultTransition.gestureDirection}=(descriptor===null||descriptor===void 0?void 0:descriptor.options)||{};return getDistanceForDirection(layout,gestureDirection);};const getProgressFromGesture=(gesture,layout,descriptor)=>{const distance=getDistanceFromOptions({width:Math.max(1,layout.width),height:Math.max(1,layout.height)},descriptor);if(distance>0){return gesture.interpolate({inputRange:[0,distance],outputRange:[1,0]});}return gesture.interpolate({inputRange:[distance,0],outputRange:[0,1]});};export default class CardStack extends React.Component{static getDerivedStateFromProps(props,state){if(props.routes===state.routes&&props.descriptors===state.descriptors){return null;}const gestures=props.routes.reduce((acc,curr)=>{const descriptor=props.descriptors[curr.key];const{animationEnabled}=(descriptor===null||descriptor===void 0?void 0:descriptor.options)||{};acc[curr.key]=state.gestures[curr.key]||new Animated.Value(props.openingRouteKeys.includes(curr.key)&&animationEnabled!==false?getDistanceFromOptions(state.layout,descriptor):0);return acc;},{});const scenes=props.routes.map((route,index,self)=>{const previousRoute=self[index-1];const nextRoute=self[index+1];const oldScene=state.scenes[index];const currentGesture=gestures[route.key];const previousGesture=previousRoute?gestures[previousRoute.key]:undefined;const nextGesture=nextRoute?gestures[nextRoute.key]:undefined;const descriptor=props.descriptors[route.key]||state.descriptors[route.key]||(oldScene?oldScene.descriptor:FALLBACK_DESCRIPTOR);const nextDescriptor=props.descriptors[nextRoute===null||nextRoute===void 0?void 0:nextRoute.key]||state.descriptors[nextRoute===null||nextRoute===void 0?void 0:nextRoute.key];const previousDescriptor=props.descriptors[previousRoute===null||previousRoute===void 0?void 0:previousRoute.key]||state.descriptors[previousRoute===null||previousRoute===void 0?void 0:previousRoute.key];const optionsForTransitionConfig=index!==self.length-1&&nextDescriptor&&nextDescriptor.options.presentation!=='transparentModal'?nextDescriptor.options:descriptor.options;let defaultTransitionPreset=optionsForTransitionConfig.presentation==='modal'?ModalTransition:optionsForTransitionConfig.presentation==='transparentModal'?ModalFadeTransition:DefaultTransition;const{animationEnabled=false&&true&&true,gestureEnabled=false&&animationEnabled,gestureDirection=defaultTransitionPreset.gestureDirection,transitionSpec=defaultTransitionPreset.transitionSpec,cardStyleInterpolator=animationEnabled===false?forNoAnimationCard:defaultTransitionPreset.cardStyleInterpolator,headerStyleInterpolator=defaultTransitionPreset.headerStyleInterpolator,cardOverlayEnabled=true&&optionsForTransitionConfig.presentation!=='transparentModal'||getIsModalPresentation(cardStyleInterpolator)}=optionsForTransitionConfig;const headerMode=descriptor.options.headerMode??(!(optionsForTransitionConfig.presentation==='modal'||optionsForTransitionConfig.presentation==='transparentModal'||(nextDescriptor===null||nextDescriptor===void 0?void 0:nextDescriptor.options.presentation)==='modal'||(nextDescriptor===null||nextDescriptor===void 0?void 0:nextDescriptor.options.presentation)==='transparentModal'||getIsModalPresentation(cardStyleInterpolator))&&false&&descriptor.options.header===undefined?'float':'screen');const scene={route,descriptor:Object.assign({},descriptor,{options:Object.assign({},descriptor.options,{animationEnabled,cardOverlayEnabled,cardStyleInterpolator,gestureDirection,gestureEnabled,headerStyleInterpolator,transitionSpec,headerMode})}),progress:{current:getProgressFromGesture(currentGesture,state.layout,descriptor),next:nextGesture&&(nextDescriptor===null||nextDescriptor===void 0?void 0:nextDescriptor.options.presentation)!=='transparentModal'?getProgressFromGesture(nextGesture,state.layout,nextDescriptor):undefined,previous:previousGesture?getProgressFromGesture(previousGesture,state.layout,previousDescriptor):undefined},__memo:[state.layout,descriptor,nextDescriptor,previousDescriptor,currentGesture,nextGesture,previousGesture]};if(oldScene&&scene.__memo.every((it,i)=>{return oldScene.__memo[i]===it;})){return oldScene;}return scene;});return{routes:props.routes,scenes,gestures,descriptors:props.descriptors,headerHeights:getHeaderHeights(scenes,props.insets,props.isParentHeaderShown,props.isParentModal,state.layout,state.headerHeights)};}constructor(props){super(props);this.state={routes:[],scenes:[],gestures:{},layout:SafeAreaProviderCompat.initialMetrics.frame,descriptors:this.props.descriptors,headerHeights:{}};}handleLayout=e=>{const{height,width}=e.nativeEvent.layout;const layout={width,height};this.setState((state,props)=>{if(height===state.layout.height&&width===state.layout.width){return null;}return{layout,headerHeights:getHeaderHeights(state.scenes,props.insets,props.isParentHeaderShown,props.isParentModal,layout,state.headerHeights)};});};handleHeaderLayout=_ref=>{let{route,height}=_ref;this.setState(_ref2=>{let{headerHeights}=_ref2;const previousHeight=headerHeights[route.key];if(previousHeight===height){return null;}return{headerHeights:Object.assign({},headerHeights,{[route.key]:height})};});};getFocusedRoute=()=>{const{state}=this.props;return state.routes[state.index];};getPreviousScene=_ref3=>{let{route}=_ref3;const{getPreviousRoute}=this.props;const{scenes}=this.state;const previousRoute=getPreviousRoute({route});if(previousRoute){const previousScene=scenes.find(scene=>scene.descriptor.route.key===previousRoute.key);return previousScene;}return undefined;};render(){const{insets,state,routes,closingRouteKeys,onOpenRoute,onCloseRoute,renderHeader,renderScene,isParentHeaderShown,isParentModal,onTransitionStart,onTransitionEnd,onGestureStart,onGestureEnd,onGestureCancel,detachInactiveScreens=true||false||false}=this.props;const{scenes,layout,gestures,headerHeights}=this.state;const focusedRoute=state.routes[state.index];const focusedHeaderHeight=headerHeights[focusedRoute.key];const isFloatHeaderAbsolute=this.state.scenes.slice(-2).some(scene=>{const options=scene.descriptor.options??{};const{headerMode,headerTransparent,headerShown=true}=options;if(headerTransparent||headerShown===false||headerMode==='screen'){return true;}return false;});let activeScreensLimit=1;for(let i=scenes.length-1;i>=0;i--){const{options}=scenes[i].descriptor;const{detachPreviousScreen=options.presentation==='transparentModal'?false:getIsModalPresentation(options.cardStyleInterpolator)?i!==findLastIndex(scenes,scene=>{const{cardStyleInterpolator}=scene.descriptor.options;return cardStyleInterpolator===forModalPresentationIOS||(cardStyleInterpolator===null||cardStyleInterpolator===void 0?void 0:cardStyleInterpolator.name)==='forModalPresentationIOS';}):true}=options;if(detachPreviousScreen===false){activeScreensLimit++;}else{if(i<=scenes.length-2){break;}}}const floatingHeader=React.createElement(React.Fragment,{key:\"header\"},renderHeader({mode:'float',layout,scenes,getPreviousScene:this.getPreviousScene,getFocusedRoute:this.getFocusedRoute,onContentHeightChange:this.handleHeaderLayout,style:[styles.floating,isFloatHeaderAbsolute&&[{height:focusedHeaderHeight},styles.absolute]]}));return React.createElement(Background,null,isFloatHeaderAbsolute?null:floatingHeader,React.createElement(MaybeScreenContainer,{enabled:detachInactiveScreens,style:styles.container,onLayout:this.handleLayout},routes.map((route,index,self)=>{var _scenes,_scenes2;const focused=focusedRoute.key===route.key;const gesture=gestures[route.key];const scene=scenes[index];let isScreenActive=1;if(index<self.length-activeScreensLimit-1){isScreenActive=STATE_INACTIVE;}else{const sceneForActivity=scenes[self.length-1];const outputValue=index===self.length-1?STATE_ON_TOP:index>=self.length-activeScreensLimit?STATE_TRANSITIONING_OR_BELOW_TOP:STATE_INACTIVE;isScreenActive=sceneForActivity?sceneForActivity.progress.current.interpolate({inputRange:[0,1-EPSILON,1],outputRange:[1,1,outputValue],extrapolate:'clamp'}):STATE_TRANSITIONING_OR_BELOW_TOP;}const{headerShown=true,headerTransparent,headerStyle,headerTintColor,freezeOnBlur}=scene.descriptor.options;const safeAreaInsetTop=insets.top;const safeAreaInsetRight=insets.right;const safeAreaInsetBottom=insets.bottom;const safeAreaInsetLeft=insets.left;const headerHeight=headerShown!==false?headerHeights[route.key]:0;let headerDarkContent;if(headerShown){if(typeof headerTintColor==='string'){headerDarkContent=Color(headerTintColor).isDark();}else{const flattenedHeaderStyle=StyleSheet.flatten(headerStyle);if(flattenedHeaderStyle&&'backgroundColor'in flattenedHeaderStyle&&typeof flattenedHeaderStyle.backgroundColor==='string'){headerDarkContent=!Color(flattenedHeaderStyle.backgroundColor).isDark();}}}const interpolationIndex=getInterpolationIndex(scenes,index);const isModal=getIsModal(scene,interpolationIndex,isParentModal);const isNextScreenTransparent=((_scenes=scenes[index+1])===null||_scenes===void 0?void 0:_scenes.descriptor.options.presentation)==='transparentModal';const detachCurrentScreen=((_scenes2=scenes[index+1])===null||_scenes2===void 0?void 0:_scenes2.descriptor.options.detachPreviousScreen)!==false;return React.createElement(MaybeScreen,{key:route.key,style:StyleSheet.absoluteFill,enabled:detachInactiveScreens,active:isScreenActive,freezeOnBlur:freezeOnBlur,pointerEvents:\"box-none\"},React.createElement(CardContainer,{index:index,interpolationIndex:interpolationIndex,modal:isModal,active:index===self.length-1,focused:focused,closing:closingRouteKeys.includes(route.key),layout:layout,gesture:gesture,scene:scene,safeAreaInsetTop:safeAreaInsetTop,safeAreaInsetRight:safeAreaInsetRight,safeAreaInsetBottom:safeAreaInsetBottom,safeAreaInsetLeft:safeAreaInsetLeft,onGestureStart:onGestureStart,onGestureCancel:onGestureCancel,onGestureEnd:onGestureEnd,headerHeight:headerHeight,isParentHeaderShown:isParentHeaderShown,onHeaderHeightChange:this.handleHeaderLayout,getPreviousScene:this.getPreviousScene,getFocusedRoute:this.getFocusedRoute,headerDarkContent:headerDarkContent,hasAbsoluteFloatHeader:isFloatHeaderAbsolute&&!headerTransparent,renderHeader:renderHeader,renderScene:renderScene,onOpenRoute:onOpenRoute,onCloseRoute:onCloseRoute,onTransitionStart:onTransitionStart,onTransitionEnd:onTransitionEnd,isNextScreenTransparent:isNextScreenTransparent,detachCurrentScreen:detachCurrentScreen}));})),isFloatHeaderAbsolute?floatingHeader:null);}}const styles=StyleSheet.create({container:{flex:1},absolute:{position:'absolute',top:0,left:0,right:0},floating:{zIndex:1}});","map":{"version":3,"names":["Background","getDefaultHeaderHeight","SafeAreaProviderCompat","Color","React","Animated","Platform","StyleSheet","forModalPresentationIOS","forNoAnimation","forNoAnimationCard","DefaultTransition","ModalFadeTransition","ModalTransition","findLastIndex","getDistanceForDirection","MaybeScreen","MaybeScreenContainer","getIsModalPresentation","CardContainer","EPSILON","STATE_INACTIVE","STATE_TRANSITIONING_OR_BELOW_TOP","STATE_ON_TOP","FALLBACK_DESCRIPTOR","Object","freeze","options","getInterpolationIndex","scenes","index","cardStyleInterpolator","descriptor","interpolationIndex","i","_scenes$i","cardStyleInterpolatorCurrent","getIsModal","scene","isParentModal","isModalPresentation","isModal","getHeaderHeights","insets","isParentHeaderShown","layout","previous","reduce","acc","curr","headerStatusBarHeight","top","headerStyle","style","flatten","height","route","key","getDistanceFromOptions","presentation","gestureDirection","getProgressFromGesture","gesture","distance","width","Math","max","interpolate","inputRange","outputRange","CardStack","Component","getDerivedStateFromProps","props","state","routes","descriptors","gestures","animationEnabled","Value","openingRouteKeys","includes","map","self","previousRoute","nextRoute","oldScene","currentGesture","previousGesture","undefined","nextGesture","nextDescriptor","previousDescriptor","optionsForTransitionConfig","length","defaultTransitionPreset","gestureEnabled","transitionSpec","headerStyleInterpolator","cardOverlayEnabled","headerMode","header","assign","progress","current","next","__memo","every","it","headerHeights","constructor","initialMetrics","frame","handleLayout","e","nativeEvent","setState","handleHeaderLayout","_ref","_ref2","previousHeight","getFocusedRoute","getPreviousScene","_ref3","getPreviousRoute","previousScene","find","render","closingRouteKeys","onOpenRoute","onCloseRoute","renderHeader","renderScene","onTransitionStart","onTransitionEnd","onGestureStart","onGestureEnd","onGestureCancel","detachInactiveScreens","focusedRoute","focusedHeaderHeight","isFloatHeaderAbsolute","slice","some","headerTransparent","headerShown","activeScreensLimit","detachPreviousScreen","name","floatingHeader","createElement","Fragment","mode","onContentHeightChange","styles","floating","absolute","enabled","container","onLayout","_scenes","_scenes2","focused","isScreenActive","sceneForActivity","outputValue","extrapolate","headerTintColor","freezeOnBlur","safeAreaInsetTop","safeAreaInsetRight","right","safeAreaInsetBottom","bottom","safeAreaInsetLeft","left","headerHeight","headerDarkContent","isDark","flattenedHeaderStyle","backgroundColor","isNextScreenTransparent","detachCurrentScreen","absoluteFill","active","pointerEvents","modal","closing","onHeaderHeightChange","hasAbsoluteFloatHeader","create","flex","position","zIndex"],"sources":["C:\\Users\\Carlos\\Desktop\\LightingGrabberApp\\LightingGrabberApp\\node_modules\\@react-navigation\\stack\\src\\views\\Stack\\CardStack.tsx"],"sourcesContent":["import {\n  Background,\n  getDefaultHeaderHeight,\n  SafeAreaProviderCompat,\n} from '@react-navigation/elements';\nimport type {\n  ParamListBase,\n  Route,\n  StackNavigationState,\n} from '@react-navigation/native';\nimport Color from 'color';\nimport * as React from 'react';\nimport {\n  Animated,\n  LayoutChangeEvent,\n  Platform,\n  StyleSheet,\n} from 'react-native';\nimport type { EdgeInsets } from 'react-native-safe-area-context';\n\nimport {\n  forModalPresentationIOS,\n  forNoAnimation as forNoAnimationCard,\n} from '../../TransitionConfigs/CardStyleInterpolators';\nimport {\n  DefaultTransition,\n  ModalFadeTransition,\n  ModalTransition,\n} from '../../TransitionConfigs/TransitionPresets';\nimport type {\n  Layout,\n  Scene,\n  StackDescriptor,\n  StackDescriptorMap,\n  StackHeaderMode,\n  StackNavigationOptions,\n} from '../../types';\nimport findLastIndex from '../../utils/findLastIndex';\nimport getDistanceForDirection from '../../utils/getDistanceForDirection';\nimport type { Props as HeaderContainerProps } from '../Header/HeaderContainer';\nimport { MaybeScreen, MaybeScreenContainer } from '../Screens';\nimport { getIsModalPresentation } from './Card';\nimport CardContainer from './CardContainer';\n\ntype GestureValues = {\n  [key: string]: Animated.Value;\n};\n\ntype Props = {\n  insets: EdgeInsets;\n  state: StackNavigationState<ParamListBase>;\n  descriptors: StackDescriptorMap;\n  routes: Route<string>[];\n  openingRouteKeys: string[];\n  closingRouteKeys: string[];\n  onOpenRoute: (props: { route: Route<string> }) => void;\n  onCloseRoute: (props: { route: Route<string> }) => void;\n  getPreviousRoute: (props: {\n    route: Route<string>;\n  }) => Route<string> | undefined;\n  renderHeader: (props: HeaderContainerProps) => React.ReactNode;\n  renderScene: (props: { route: Route<string> }) => React.ReactNode;\n  isParentHeaderShown: boolean;\n  isParentModal: boolean;\n  onTransitionStart: (\n    props: { route: Route<string> },\n    closing: boolean\n  ) => void;\n  onTransitionEnd: (props: { route: Route<string> }, closing: boolean) => void;\n  onGestureStart: (props: { route: Route<string> }) => void;\n  onGestureEnd: (props: { route: Route<string> }) => void;\n  onGestureCancel: (props: { route: Route<string> }) => void;\n  detachInactiveScreens?: boolean;\n};\n\ntype State = {\n  routes: Route<string>[];\n  descriptors: StackDescriptorMap;\n  scenes: Scene[];\n  gestures: GestureValues;\n  layout: Layout;\n  headerHeights: Record<string, number>;\n};\n\nconst EPSILON = 1e-5;\n\nconst STATE_INACTIVE = 0;\nconst STATE_TRANSITIONING_OR_BELOW_TOP = 1;\nconst STATE_ON_TOP = 2;\n\nconst FALLBACK_DESCRIPTOR = Object.freeze({ options: {} });\n\nconst getInterpolationIndex = (scenes: Scene[], index: number) => {\n  const { cardStyleInterpolator } = scenes[index].descriptor.options;\n\n  // Start from current card and count backwards the number of cards with same interpolation\n  let interpolationIndex = 0;\n\n  for (let i = index - 1; i >= 0; i--) {\n    const cardStyleInterpolatorCurrent =\n      scenes[i]?.descriptor.options.cardStyleInterpolator;\n\n    if (cardStyleInterpolatorCurrent !== cardStyleInterpolator) {\n      break;\n    }\n\n    interpolationIndex++;\n  }\n\n  return interpolationIndex;\n};\n\nconst getIsModal = (\n  scene: Scene,\n  interpolationIndex: number,\n  isParentModal: boolean\n) => {\n  if (isParentModal) {\n    return true;\n  }\n\n  const { cardStyleInterpolator } = scene.descriptor.options;\n  const isModalPresentation = getIsModalPresentation(cardStyleInterpolator);\n  const isModal = isModalPresentation && interpolationIndex !== 0;\n\n  return isModal;\n};\n\nconst getHeaderHeights = (\n  scenes: Scene[],\n  insets: EdgeInsets,\n  isParentHeaderShown: boolean,\n  isParentModal: boolean,\n  layout: Layout,\n  previous: Record<string, number>\n) => {\n  return scenes.reduce<Record<string, number>>((acc, curr, index) => {\n    const {\n      headerStatusBarHeight = isParentHeaderShown ? 0 : insets.top,\n      headerStyle,\n    } = curr.descriptor.options;\n\n    const style = StyleSheet.flatten(headerStyle || {});\n\n    const height =\n      'height' in style && typeof style.height === 'number'\n        ? style.height\n        : previous[curr.route.key];\n\n    const interpolationIndex = getInterpolationIndex(scenes, index);\n    const isModal = getIsModal(curr, interpolationIndex, isParentModal);\n\n    acc[curr.route.key] =\n      typeof height === 'number'\n        ? height\n        : getDefaultHeaderHeight(layout, isModal, headerStatusBarHeight);\n\n    return acc;\n  }, {});\n};\n\nconst getDistanceFromOptions = (\n  layout: Layout,\n  descriptor?: StackDescriptor\n) => {\n  const {\n    presentation,\n    gestureDirection = presentation === 'modal'\n      ? ModalTransition.gestureDirection\n      : DefaultTransition.gestureDirection,\n  } = (descriptor?.options || {}) as StackNavigationOptions;\n\n  return getDistanceForDirection(layout, gestureDirection);\n};\n\nconst getProgressFromGesture = (\n  gesture: Animated.Value,\n  layout: Layout,\n  descriptor?: StackDescriptor\n) => {\n  const distance = getDistanceFromOptions(\n    {\n      // Make sure that we have a non-zero distance, otherwise there will be incorrect progress\n      // This causes blank screen on web if it was previously inside container with display: none\n      width: Math.max(1, layout.width),\n      height: Math.max(1, layout.height),\n    },\n    descriptor\n  );\n\n  if (distance > 0) {\n    return gesture.interpolate({\n      inputRange: [0, distance],\n      outputRange: [1, 0],\n    });\n  }\n\n  return gesture.interpolate({\n    inputRange: [distance, 0],\n    outputRange: [0, 1],\n  });\n};\n\nexport default class CardStack extends React.Component<Props, State> {\n  static getDerivedStateFromProps(\n    props: Props,\n    state: State\n  ): Partial<State> | null {\n    if (\n      props.routes === state.routes &&\n      props.descriptors === state.descriptors\n    ) {\n      return null;\n    }\n\n    const gestures = props.routes.reduce<GestureValues>((acc, curr) => {\n      const descriptor = props.descriptors[curr.key];\n      const { animationEnabled } = descriptor?.options || {};\n\n      acc[curr.key] =\n        state.gestures[curr.key] ||\n        new Animated.Value(\n          props.openingRouteKeys.includes(curr.key) &&\n          animationEnabled !== false\n            ? getDistanceFromOptions(state.layout, descriptor)\n            : 0\n        );\n\n      return acc;\n    }, {});\n\n    const scenes = props.routes.map((route, index, self) => {\n      const previousRoute = self[index - 1];\n      const nextRoute = self[index + 1];\n\n      const oldScene = state.scenes[index];\n\n      const currentGesture = gestures[route.key];\n      const previousGesture = previousRoute\n        ? gestures[previousRoute.key]\n        : undefined;\n      const nextGesture = nextRoute ? gestures[nextRoute.key] : undefined;\n\n      const descriptor =\n        props.descriptors[route.key] ||\n        state.descriptors[route.key] ||\n        (oldScene ? oldScene.descriptor : FALLBACK_DESCRIPTOR);\n\n      const nextDescriptor =\n        props.descriptors[nextRoute?.key] || state.descriptors[nextRoute?.key];\n\n      const previousDescriptor =\n        props.descriptors[previousRoute?.key] ||\n        state.descriptors[previousRoute?.key];\n\n      // When a screen is not the last, it should use next screen's transition config\n      // Many transitions also animate the previous screen, so using 2 different transitions doesn't look right\n      // For example combining a slide and a modal transition would look wrong otherwise\n      // With this approach, combining different transition styles in the same navigator mostly looks right\n      // This will still be broken when 2 transitions have different idle state (e.g. modal presentation),\n      // but majority of the transitions look alright\n      const optionsForTransitionConfig =\n        index !== self.length - 1 &&\n        nextDescriptor &&\n        nextDescriptor.options.presentation !== 'transparentModal'\n          ? nextDescriptor.options\n          : descriptor.options;\n\n      let defaultTransitionPreset =\n        optionsForTransitionConfig.presentation === 'modal'\n          ? ModalTransition\n          : optionsForTransitionConfig.presentation === 'transparentModal'\n          ? ModalFadeTransition\n          : DefaultTransition;\n\n      const {\n        animationEnabled = Platform.OS !== 'web' &&\n          Platform.OS !== 'windows' &&\n          Platform.OS !== 'macos',\n        gestureEnabled = Platform.OS === 'ios' && animationEnabled,\n        gestureDirection = defaultTransitionPreset.gestureDirection,\n        transitionSpec = defaultTransitionPreset.transitionSpec,\n        cardStyleInterpolator = animationEnabled === false\n          ? forNoAnimationCard\n          : defaultTransitionPreset.cardStyleInterpolator,\n        headerStyleInterpolator = defaultTransitionPreset.headerStyleInterpolator,\n        cardOverlayEnabled = (Platform.OS !== 'ios' &&\n          optionsForTransitionConfig.presentation !== 'transparentModal') ||\n          getIsModalPresentation(cardStyleInterpolator),\n      } = optionsForTransitionConfig;\n\n      const headerMode: StackHeaderMode =\n        descriptor.options.headerMode ??\n        (!(\n          optionsForTransitionConfig.presentation === 'modal' ||\n          optionsForTransitionConfig.presentation === 'transparentModal' ||\n          nextDescriptor?.options.presentation === 'modal' ||\n          nextDescriptor?.options.presentation === 'transparentModal' ||\n          getIsModalPresentation(cardStyleInterpolator)\n        ) &&\n        Platform.OS === 'ios' &&\n        descriptor.options.header === undefined\n          ? 'float'\n          : 'screen');\n\n      const scene = {\n        route,\n        descriptor: {\n          ...descriptor,\n          options: {\n            ...descriptor.options,\n            animationEnabled,\n            cardOverlayEnabled,\n            cardStyleInterpolator,\n            gestureDirection,\n            gestureEnabled,\n            headerStyleInterpolator,\n            transitionSpec,\n            headerMode,\n          },\n        },\n        progress: {\n          current: getProgressFromGesture(\n            currentGesture,\n            state.layout,\n            descriptor\n          ),\n          next:\n            nextGesture &&\n            nextDescriptor?.options.presentation !== 'transparentModal'\n              ? getProgressFromGesture(\n                  nextGesture,\n                  state.layout,\n                  nextDescriptor\n                )\n              : undefined,\n          previous: previousGesture\n            ? getProgressFromGesture(\n                previousGesture,\n                state.layout,\n                previousDescriptor\n              )\n            : undefined,\n        },\n        __memo: [\n          state.layout,\n          descriptor,\n          nextDescriptor,\n          previousDescriptor,\n          currentGesture,\n          nextGesture,\n          previousGesture,\n        ],\n      };\n\n      if (\n        oldScene &&\n        scene.__memo.every((it, i) => {\n          // @ts-expect-error: we haven't added __memo to the annotation to prevent usage elsewhere\n          return oldScene.__memo[i] === it;\n        })\n      ) {\n        return oldScene;\n      }\n\n      return scene;\n    });\n\n    return {\n      routes: props.routes,\n      scenes,\n      gestures,\n      descriptors: props.descriptors,\n      headerHeights: getHeaderHeights(\n        scenes,\n        props.insets,\n        props.isParentHeaderShown,\n        props.isParentModal,\n        state.layout,\n        state.headerHeights\n      ),\n    };\n  }\n\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      routes: [],\n      scenes: [],\n      gestures: {},\n      layout: SafeAreaProviderCompat.initialMetrics.frame,\n      descriptors: this.props.descriptors,\n      // Used when card's header is null and mode is float to make transition\n      // between screens with headers and those without headers smooth.\n      // This is not a great heuristic here. We don't know synchronously\n      // on mount what the header height is so we have just used the most\n      // common cases here.\n      headerHeights: {},\n    };\n  }\n\n  private handleLayout = (e: LayoutChangeEvent) => {\n    const { height, width } = e.nativeEvent.layout;\n\n    const layout = { width, height };\n\n    this.setState((state, props) => {\n      if (height === state.layout.height && width === state.layout.width) {\n        return null;\n      }\n\n      return {\n        layout,\n        headerHeights: getHeaderHeights(\n          state.scenes,\n          props.insets,\n          props.isParentHeaderShown,\n          props.isParentModal,\n          layout,\n          state.headerHeights\n        ),\n      };\n    });\n  };\n\n  private handleHeaderLayout = ({\n    route,\n    height,\n  }: {\n    route: Route<string>;\n    height: number;\n  }) => {\n    this.setState(({ headerHeights }) => {\n      const previousHeight = headerHeights[route.key];\n\n      if (previousHeight === height) {\n        return null;\n      }\n\n      return {\n        headerHeights: {\n          ...headerHeights,\n          [route.key]: height,\n        },\n      };\n    });\n  };\n\n  private getFocusedRoute = () => {\n    const { state } = this.props;\n\n    return state.routes[state.index];\n  };\n\n  private getPreviousScene = ({ route }: { route: Route<string> }) => {\n    const { getPreviousRoute } = this.props;\n    const { scenes } = this.state;\n\n    const previousRoute = getPreviousRoute({ route });\n\n    if (previousRoute) {\n      const previousScene = scenes.find(\n        (scene) => scene.descriptor.route.key === previousRoute.key\n      );\n\n      return previousScene;\n    }\n\n    return undefined;\n  };\n\n  render() {\n    const {\n      insets,\n      state,\n      routes,\n      closingRouteKeys,\n      onOpenRoute,\n      onCloseRoute,\n      renderHeader,\n      renderScene,\n      isParentHeaderShown,\n      isParentModal,\n      onTransitionStart,\n      onTransitionEnd,\n      onGestureStart,\n      onGestureEnd,\n      onGestureCancel,\n      detachInactiveScreens = Platform.OS === 'web' ||\n        Platform.OS === 'android' ||\n        Platform.OS === 'ios',\n    } = this.props;\n\n    const { scenes, layout, gestures, headerHeights } = this.state;\n\n    const focusedRoute = state.routes[state.index];\n    const focusedHeaderHeight = headerHeights[focusedRoute.key];\n\n    const isFloatHeaderAbsolute = this.state.scenes.slice(-2).some((scene) => {\n      const options = scene.descriptor.options ?? {};\n      const { headerMode, headerTransparent, headerShown = true } = options;\n\n      if (\n        headerTransparent ||\n        headerShown === false ||\n        headerMode === 'screen'\n      ) {\n        return true;\n      }\n\n      return false;\n    });\n\n    let activeScreensLimit = 1;\n\n    for (let i = scenes.length - 1; i >= 0; i--) {\n      const { options } = scenes[i].descriptor;\n      const {\n        // By default, we don't want to detach the previous screen of the active one for modals\n        detachPreviousScreen = options.presentation === 'transparentModal'\n          ? false\n          : getIsModalPresentation(options.cardStyleInterpolator)\n          ? i !==\n            findLastIndex(scenes, (scene) => {\n              const { cardStyleInterpolator } = scene.descriptor.options;\n\n              return (\n                cardStyleInterpolator === forModalPresentationIOS ||\n                cardStyleInterpolator?.name === 'forModalPresentationIOS'\n              );\n            })\n          : true,\n      } = options;\n\n      if (detachPreviousScreen === false) {\n        activeScreensLimit++;\n      } else {\n        // Check at least last 2 screens before stopping\n        // This will make sure that screen isn't detached when another screen is animating on top of the transparent one\n        // For example, (Opaque -> Transparent -> Opaque)\n        if (i <= scenes.length - 2) {\n          break;\n        }\n      }\n    }\n\n    const floatingHeader = (\n      <React.Fragment key=\"header\">\n        {renderHeader({\n          mode: 'float',\n          layout,\n          scenes,\n          getPreviousScene: this.getPreviousScene,\n          getFocusedRoute: this.getFocusedRoute,\n          onContentHeightChange: this.handleHeaderLayout,\n          style: [\n            styles.floating,\n            isFloatHeaderAbsolute && [\n              // Without this, the header buttons won't be touchable on Android when headerTransparent: true\n              { height: focusedHeaderHeight },\n              styles.absolute,\n            ],\n          ],\n        })}\n      </React.Fragment>\n    );\n\n    return (\n      <Background>\n        {isFloatHeaderAbsolute ? null : floatingHeader}\n        <MaybeScreenContainer\n          enabled={detachInactiveScreens}\n          style={styles.container}\n          onLayout={this.handleLayout}\n        >\n          {routes.map((route, index, self) => {\n            const focused = focusedRoute.key === route.key;\n            const gesture = gestures[route.key];\n            const scene = scenes[index];\n\n            // For the screens that shouldn't be active, the value is 0\n            // For those that should be active, but are not the top screen, the value is 1\n            // For those on top of the stack and with interaction enabled, the value is 2\n            // For the old implementation, it stays the same it was\n            let isScreenActive:\n              | Animated.AnimatedInterpolation<0 | 1 | 2>\n              | 2\n              | 1\n              | 0 = 1;\n\n            if (index < self.length - activeScreensLimit - 1) {\n              // screen should be inactive because it is too deep in the stack\n              isScreenActive = STATE_INACTIVE;\n            } else {\n              const sceneForActivity = scenes[self.length - 1];\n              const outputValue =\n                index === self.length - 1\n                  ? STATE_ON_TOP // the screen is on top after the transition\n                  : index >= self.length - activeScreensLimit\n                  ? STATE_TRANSITIONING_OR_BELOW_TOP // the screen should stay active after the transition, it is not on top but is in activeLimit\n                  : STATE_INACTIVE; // the screen should be active only during the transition, it is at the edge of activeLimit\n              isScreenActive = sceneForActivity\n                ? sceneForActivity.progress.current.interpolate({\n                    inputRange: [0, 1 - EPSILON, 1],\n                    outputRange: [1, 1, outputValue],\n                    extrapolate: 'clamp',\n                  })\n                : STATE_TRANSITIONING_OR_BELOW_TOP;\n            }\n\n            const {\n              headerShown = true,\n              headerTransparent,\n              headerStyle,\n              headerTintColor,\n              freezeOnBlur,\n            } = scene.descriptor.options;\n\n            const safeAreaInsetTop = insets.top;\n            const safeAreaInsetRight = insets.right;\n            const safeAreaInsetBottom = insets.bottom;\n            const safeAreaInsetLeft = insets.left;\n\n            const headerHeight =\n              headerShown !== false ? headerHeights[route.key] : 0;\n\n            let headerDarkContent: boolean | undefined;\n\n            if (headerShown) {\n              if (typeof headerTintColor === 'string') {\n                headerDarkContent = Color(headerTintColor).isDark();\n              } else {\n                const flattenedHeaderStyle = StyleSheet.flatten(headerStyle);\n\n                if (\n                  flattenedHeaderStyle &&\n                  'backgroundColor' in flattenedHeaderStyle &&\n                  typeof flattenedHeaderStyle.backgroundColor === 'string'\n                ) {\n                  headerDarkContent = !Color(\n                    flattenedHeaderStyle.backgroundColor\n                  ).isDark();\n                }\n              }\n            }\n\n            // Start from current card and count backwards the number of cards with same interpolation\n            const interpolationIndex = getInterpolationIndex(scenes, index);\n            const isModal = getIsModal(\n              scene,\n              interpolationIndex,\n              isParentModal\n            );\n\n            const isNextScreenTransparent =\n              scenes[index + 1]?.descriptor.options.presentation ===\n              'transparentModal';\n\n            const detachCurrentScreen =\n              scenes[index + 1]?.descriptor.options.detachPreviousScreen !==\n              false;\n\n            return (\n              <MaybeScreen\n                key={route.key}\n                style={StyleSheet.absoluteFill}\n                enabled={detachInactiveScreens}\n                active={isScreenActive}\n                freezeOnBlur={freezeOnBlur}\n                pointerEvents=\"box-none\"\n              >\n                <CardContainer\n                  index={index}\n                  interpolationIndex={interpolationIndex}\n                  modal={isModal}\n                  active={index === self.length - 1}\n                  focused={focused}\n                  closing={closingRouteKeys.includes(route.key)}\n                  layout={layout}\n                  gesture={gesture}\n                  scene={scene}\n                  safeAreaInsetTop={safeAreaInsetTop}\n                  safeAreaInsetRight={safeAreaInsetRight}\n                  safeAreaInsetBottom={safeAreaInsetBottom}\n                  safeAreaInsetLeft={safeAreaInsetLeft}\n                  onGestureStart={onGestureStart}\n                  onGestureCancel={onGestureCancel}\n                  onGestureEnd={onGestureEnd}\n                  headerHeight={headerHeight}\n                  isParentHeaderShown={isParentHeaderShown}\n                  onHeaderHeightChange={this.handleHeaderLayout}\n                  getPreviousScene={this.getPreviousScene}\n                  getFocusedRoute={this.getFocusedRoute}\n                  headerDarkContent={headerDarkContent}\n                  hasAbsoluteFloatHeader={\n                    isFloatHeaderAbsolute && !headerTransparent\n                  }\n                  renderHeader={renderHeader}\n                  renderScene={renderScene}\n                  onOpenRoute={onOpenRoute}\n                  onCloseRoute={onCloseRoute}\n                  onTransitionStart={onTransitionStart}\n                  onTransitionEnd={onTransitionEnd}\n                  isNextScreenTransparent={isNextScreenTransparent}\n                  detachCurrentScreen={detachCurrentScreen}\n                />\n              </MaybeScreen>\n            );\n          })}\n        </MaybeScreenContainer>\n        {isFloatHeaderAbsolute ? floatingHeader : null}\n      </Background>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  absolute: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n  },\n  floating: {\n    zIndex: 1,\n  },\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}